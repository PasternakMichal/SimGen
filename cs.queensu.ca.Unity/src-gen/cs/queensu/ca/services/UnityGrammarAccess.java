/*
 * generated by Xtext 2.11.0
 */
package cs.queensu.ca.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class UnityGrammarAccess extends AbstractGrammarElementFinder {
	
	public class SpecificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "cs.queensu.ca.Unity.Specification");
		private final Assignment cSpecAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cSpecAlternatives_0 = (Alternatives)cSpecAssignment.eContents().get(0);
		private final RuleCall cSpecUnityObjectParserRuleCall_0_0 = (RuleCall)cSpecAlternatives_0.eContents().get(0);
		private final RuleCall cSpecMetaObjectParserRuleCall_0_1 = (RuleCall)cSpecAlternatives_0.eContents().get(1);
		private final RuleCall cSpecENVParserRuleCall_0_2 = (RuleCall)cSpecAlternatives_0.eContents().get(2);
		
		//Specification:
		//	spec+=(UnityObject | MetaObject | ENV)*;
		@Override public ParserRule getRule() { return rule; }
		
		//spec+=(UnityObject | MetaObject | ENV)*
		public Assignment getSpecAssignment() { return cSpecAssignment; }
		
		//(UnityObject | MetaObject | ENV)
		public Alternatives getSpecAlternatives_0() { return cSpecAlternatives_0; }
		
		//UnityObject
		public RuleCall getSpecUnityObjectParserRuleCall_0_0() { return cSpecUnityObjectParserRuleCall_0_0; }
		
		//MetaObject
		public RuleCall getSpecMetaObjectParserRuleCall_0_1() { return cSpecMetaObjectParserRuleCall_0_1; }
		
		//ENV
		public RuleCall getSpecENVParserRuleCall_0_2() { return cSpecENVParserRuleCall_0_2; }
	}
	public class MetaObjectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "cs.queensu.ca.Unity.MetaObject");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMetaObjectKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cKindAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Alternatives cKindAlternatives_3_0 = (Alternatives)cKindAssignment_3.eContents().get(0);
		private final Keyword cKindCarKeyword_3_0_0 = (Keyword)cKindAlternatives_3_0.eContents().get(0);
		private final Keyword cKindRoverKeyword_3_0_1 = (Keyword)cKindAlternatives_3_0.eContents().get(1);
		private final Keyword cKindOthersKeyword_3_0_2 = (Keyword)cKindAlternatives_3_0.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Alternatives cAlternatives_5 = (Alternatives)cGroup.eContents().get(5);
		private final Assignment cPropertiesAssignment_5_0 = (Assignment)cAlternatives_5.eContents().get(0);
		private final RuleCall cPropertiesAttributeParserRuleCall_5_0_0 = (RuleCall)cPropertiesAssignment_5_0.eContents().get(0);
		private final Assignment cActionsAssignment_5_1 = (Assignment)cAlternatives_5.eContents().get(1);
		private final RuleCall cActionsActionParserRuleCall_5_1_0 = (RuleCall)cActionsAssignment_5_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		///*=====================================================================================================
		// * MetaObject defines properties, actions, and commands
		// * Property rule has a pattern such as Speed : int range ( 1 .. 300); 
		// * Action rule includes input, output, and expressions
		// * Command rule can defines commands such as command c1(parm1:bool,parm1:int) returns out:boolean;
		// =====================================================================================================*/ MetaObject:
		//	'MetaObject' name=ID ':' kind=('car' | 'rover' | 'others')
		//	'{' (properties+=Attribute
		//	| actions+=Action)*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'MetaObject' name=ID ':' kind=('car' | 'rover' | 'others') '{' (properties+=Attribute | actions+=Action)* '}'
		public Group getGroup() { return cGroup; }
		
		//'MetaObject'
		public Keyword getMetaObjectKeyword_0() { return cMetaObjectKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//kind=('car' | 'rover' | 'others')
		public Assignment getKindAssignment_3() { return cKindAssignment_3; }
		
		//('car' | 'rover' | 'others')
		public Alternatives getKindAlternatives_3_0() { return cKindAlternatives_3_0; }
		
		//'car'
		public Keyword getKindCarKeyword_3_0_0() { return cKindCarKeyword_3_0_0; }
		
		//'rover'
		public Keyword getKindRoverKeyword_3_0_1() { return cKindRoverKeyword_3_0_1; }
		
		//'others'
		public Keyword getKindOthersKeyword_3_0_2() { return cKindOthersKeyword_3_0_2; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//(properties+=Attribute | actions+=Action)*
		public Alternatives getAlternatives_5() { return cAlternatives_5; }
		
		//properties+=Attribute
		public Assignment getPropertiesAssignment_5_0() { return cPropertiesAssignment_5_0; }
		
		//Attribute
		public RuleCall getPropertiesAttributeParserRuleCall_5_0_0() { return cPropertiesAttributeParserRuleCall_5_0_0; }
		
		//actions+=Action
		public Assignment getActionsAssignment_5_1() { return cActionsAssignment_5_1; }
		
		//Action
		public RuleCall getActionsActionParserRuleCall_5_1_0() { return cActionsActionParserRuleCall_5_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class ActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "cs.queensu.ca.Unity.Action");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cActionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cPayloadAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPayloadPayloadParserRuleCall_3_0 = (RuleCall)cPayloadAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cReturnKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cReturnPayloadAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cReturnPayloadPayloadParserRuleCall_5_2_0 = (RuleCall)cReturnPayloadAssignment_5_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5_3 = (Keyword)cGroup_5.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cExpressionsAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cExpressionsExpressionParserRuleCall_7_0 = (RuleCall)cExpressionsAssignment_7.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//Action:
		//	'Action' name=ID '(' payload=Payload? ')' ('return' '(' returnPayload=Payload? ')')
		//	'{'
		//	expressions+=Expression*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Action' name=ID '(' payload=Payload? ')' ('return' '(' returnPayload=Payload? ')') '{' expressions+=Expression* '}'
		public Group getGroup() { return cGroup; }
		
		//'Action'
		public Keyword getActionKeyword_0() { return cActionKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//payload=Payload?
		public Assignment getPayloadAssignment_3() { return cPayloadAssignment_3; }
		
		//Payload
		public RuleCall getPayloadPayloadParserRuleCall_3_0() { return cPayloadPayloadParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
		
		//'return' '(' returnPayload=Payload? ')'
		public Group getGroup_5() { return cGroup_5; }
		
		//'return'
		public Keyword getReturnKeyword_5_0() { return cReturnKeyword_5_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_5_1() { return cLeftParenthesisKeyword_5_1; }
		
		//returnPayload=Payload?
		public Assignment getReturnPayloadAssignment_5_2() { return cReturnPayloadAssignment_5_2; }
		
		//Payload
		public RuleCall getReturnPayloadPayloadParserRuleCall_5_2_0() { return cReturnPayloadPayloadParserRuleCall_5_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5_3() { return cRightParenthesisKeyword_5_3; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_6() { return cLeftCurlyBracketKeyword_6; }
		
		//expressions+=Expression*
		public Assignment getExpressionsAssignment_7() { return cExpressionsAssignment_7; }
		
		//Expression
		public RuleCall getExpressionsExpressionParserRuleCall_7_0() { return cExpressionsExpressionParserRuleCall_7_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}
	public class PayloadElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "cs.queensu.ca.Unity.Payload");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cParamsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cParamsParamParserRuleCall_0_0 = (RuleCall)cParamsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cParamsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cParamsParamParserRuleCall_1_1_0 = (RuleCall)cParamsAssignment_1_1.eContents().get(0);
		
		//Payload:
		//	params+=Param (',' params+=Param)*;
		@Override public ParserRule getRule() { return rule; }
		
		//params+=Param (',' params+=Param)*
		public Group getGroup() { return cGroup; }
		
		//params+=Param
		public Assignment getParamsAssignment_0() { return cParamsAssignment_0; }
		
		//Param
		public RuleCall getParamsParamParserRuleCall_0_0() { return cParamsParamParserRuleCall_0_0; }
		
		//(',' params+=Param)*
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//params+=Param
		public Assignment getParamsAssignment_1_1() { return cParamsAssignment_1_1; }
		
		//Param
		public RuleCall getParamsParamParserRuleCall_1_1_0() { return cParamsParamParserRuleCall_1_1_0; }
	}
	public class ParamElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "cs.queensu.ca.Unity.Param");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeVarTypeParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		
		//Param:
		//	name=ID ':' type=VarType;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ':' type=VarType
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//type=VarType
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//VarType
		public RuleCall getTypeVarTypeParserRuleCall_2_0() { return cTypeVarTypeParserRuleCall_2_0; }
	}
	public class DotExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "cs.queensu.ca.Unity.DotExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cSingleRefParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cDotExpressionHeadAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cFullStopKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cTailAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final CrossReference cTailPropertyCrossReference_1_2_0 = (CrossReference)cTailAssignment_1_2.eContents().get(0);
		private final RuleCall cTailPropertyIDTerminalRuleCall_1_2_0_1 = (RuleCall)cTailPropertyCrossReference_1_2_0.eContents().get(1);
		
		//DotExpression Ref:
		//	SingleRef ({DotExpression.head=current} "." tail=[Property])*;
		@Override public ParserRule getRule() { return rule; }
		
		//SingleRef ({DotExpression.head=current} "." tail=[Property])*
		public Group getGroup() { return cGroup; }
		
		//SingleRef
		public RuleCall getSingleRefParserRuleCall_0() { return cSingleRefParserRuleCall_0; }
		
		//({DotExpression.head=current} "." tail=[Property])*
		public Group getGroup_1() { return cGroup_1; }
		
		//{DotExpression.head=current}
		public Action getDotExpressionHeadAction_1_0() { return cDotExpressionHeadAction_1_0; }
		
		//"."
		public Keyword getFullStopKeyword_1_1() { return cFullStopKeyword_1_1; }
		
		//tail=[Property]
		public Assignment getTailAssignment_1_2() { return cTailAssignment_1_2; }
		
		//[Property]
		public CrossReference getTailPropertyCrossReference_1_2_0() { return cTailPropertyCrossReference_1_2_0; }
		
		//ID
		public RuleCall getTailPropertyIDTerminalRuleCall_1_2_0_1() { return cTailPropertyIDTerminalRuleCall_1_2_0_1; }
	}
	public class SingleRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "cs.queensu.ca.Unity.SingleRef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSingleRefAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cSingleRefAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cSingleRefPropertyCrossReference_1_0 = (CrossReference)cSingleRefAssignment_1.eContents().get(0);
		private final RuleCall cSingleRefPropertyIDTerminalRuleCall_1_0_1 = (RuleCall)cSingleRefPropertyCrossReference_1_0.eContents().get(1);
		
		//SingleRef:
		//	{SingleRef} SingleRef=[Property];
		@Override public ParserRule getRule() { return rule; }
		
		//{SingleRef} SingleRef=[Property]
		public Group getGroup() { return cGroup; }
		
		//{SingleRef}
		public Action getSingleRefAction_0() { return cSingleRefAction_0; }
		
		//SingleRef=[Property]
		public Assignment getSingleRefAssignment_1() { return cSingleRefAssignment_1; }
		
		//[Property]
		public CrossReference getSingleRefPropertyCrossReference_1_0() { return cSingleRefPropertyCrossReference_1_0; }
		
		//ID
		public RuleCall getSingleRefPropertyIDTerminalRuleCall_1_0_1() { return cSingleRefPropertyIDTerminalRuleCall_1_0_1; }
	}
	public class PropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "cs.queensu.ca.Unity.Property");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAttributeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cInstanceParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cParamParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Property:
		//	Attribute | Instance | Param;
		@Override public ParserRule getRule() { return rule; }
		
		//Attribute | Instance | Param
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Attribute
		public RuleCall getAttributeParserRuleCall_0() { return cAttributeParserRuleCall_0; }
		
		//Instance
		public RuleCall getInstanceParserRuleCall_1() { return cInstanceParserRuleCall_1; }
		
		//Param
		public RuleCall getParamParserRuleCall_2() { return cParamParserRuleCall_2; }
	}
	public class AttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "cs.queensu.ca.Unity.Attribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPropertyKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cPropertyTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPropertyTypeVarTypeParserRuleCall_3_0 = (RuleCall)cPropertyTypeAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cRangeKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cRangeAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cRangeRangeParserRuleCall_4_1_0 = (RuleCall)cRangeAssignment_4_1.eContents().get(0);
		
		//Attribute:
		//	'property' name=ID ':' propertyType=VarType ('range' range=Range)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'property' name=ID ':' propertyType=VarType ('range' range=Range)?
		public Group getGroup() { return cGroup; }
		
		//'property'
		public Keyword getPropertyKeyword_0() { return cPropertyKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//propertyType=VarType
		public Assignment getPropertyTypeAssignment_3() { return cPropertyTypeAssignment_3; }
		
		//VarType
		public RuleCall getPropertyTypeVarTypeParserRuleCall_3_0() { return cPropertyTypeVarTypeParserRuleCall_3_0; }
		
		//('range' range=Range)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'range'
		public Keyword getRangeKeyword_4_0() { return cRangeKeyword_4_0; }
		
		//range=Range
		public Assignment getRangeAssignment_4_1() { return cRangeAssignment_4_1; }
		
		//Range
		public RuleCall getRangeRangeParserRuleCall_4_1_0() { return cRangeRangeParserRuleCall_4_1_0; }
	}
	public class VarTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "cs.queensu.ca.Unity.VarType");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cNameAlternatives_0 = (Alternatives)cNameAssignment.eContents().get(0);
		private final Keyword cNameBoolKeyword_0_0 = (Keyword)cNameAlternatives_0.eContents().get(0);
		private final Keyword cNameIntKeyword_0_1 = (Keyword)cNameAlternatives_0.eContents().get(1);
		private final Keyword cNameStringKeyword_0_2 = (Keyword)cNameAlternatives_0.eContents().get(2);
		private final Keyword cNameRealKeyword_0_3 = (Keyword)cNameAlternatives_0.eContents().get(3);
		
		//VarType:
		//	name=('bool' | 'int' | 'string' | 'real');
		@Override public ParserRule getRule() { return rule; }
		
		//name=('bool' | 'int' | 'string' | 'real')
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//('bool' | 'int' | 'string' | 'real')
		public Alternatives getNameAlternatives_0() { return cNameAlternatives_0; }
		
		//'bool'
		public Keyword getNameBoolKeyword_0_0() { return cNameBoolKeyword_0_0; }
		
		//'int'
		public Keyword getNameIntKeyword_0_1() { return cNameIntKeyword_0_1; }
		
		//'string'
		public Keyword getNameStringKeyword_0_2() { return cNameStringKeyword_0_2; }
		
		//'real'
		public Keyword getNameRealKeyword_0_3() { return cNameRealKeyword_0_3; }
	}
	public class RangeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "cs.queensu.ca.Unity.Range");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFromAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFromValueParserRuleCall_1_0 = (RuleCall)cFromAssignment_1.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cToAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cToValueParserRuleCall_3_0 = (RuleCall)cToAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Range:
		//	'('
		//	from=Value '-' to=Value
		//	')';
		@Override public ParserRule getRule() { return rule; }
		
		//'(' from=Value '-' to=Value ')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//from=Value
		public Assignment getFromAssignment_1() { return cFromAssignment_1; }
		
		//Value
		public RuleCall getFromValueParserRuleCall_1_0() { return cFromValueParserRuleCall_1_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_2() { return cHyphenMinusKeyword_2; }
		
		//to=Value
		public Assignment getToAssignment_3() { return cToAssignment_3; }
		
		//Value
		public RuleCall getToValueParserRuleCall_3_0() { return cToValueParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class ValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "cs.queensu.ca.Unity.Value");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cMinuesAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final Keyword cMinuesHyphenMinusKeyword_0_0_0 = (Keyword)cMinuesAssignment_0_0.eContents().get(0);
		private final Assignment cValueAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_0_1_0 = (RuleCall)cValueAssignment_0_1.eContents().get(0);
		private final Assignment cFixedPointValueAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cFixedPointValueRealLiteralParserRuleCall_1_0 = (RuleCall)cFixedPointValueAssignment_1.eContents().get(0);
		
		//Value:
		//	minues?='-'?
		//	value=INT
		//	| fixedPointValue=RealLiteral;
		@Override public ParserRule getRule() { return rule; }
		
		//minues?='-'? value=INT | fixedPointValue=RealLiteral
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//minues?='-'? value=INT
		public Group getGroup_0() { return cGroup_0; }
		
		//minues?='-'?
		public Assignment getMinuesAssignment_0_0() { return cMinuesAssignment_0_0; }
		
		//'-'
		public Keyword getMinuesHyphenMinusKeyword_0_0_0() { return cMinuesHyphenMinusKeyword_0_0_0; }
		
		//value=INT
		public Assignment getValueAssignment_0_1() { return cValueAssignment_0_1; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_0_1_0() { return cValueINTTerminalRuleCall_0_1_0; }
		
		//fixedPointValue=RealLiteral
		public Assignment getFixedPointValueAssignment_1() { return cFixedPointValueAssignment_1; }
		
		//RealLiteral
		public RuleCall getFixedPointValueRealLiteralParserRuleCall_1_0() { return cFixedPointValueRealLiteralParserRuleCall_1_0; }
	}
	public class RealLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "cs.queensu.ca.Unity.RealLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIntPartAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIntPartINTTerminalRuleCall_0_0 = (RuleCall)cIntPartAssignment_0.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDecimalPartAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDecimalPartINTTerminalRuleCall_2_0 = (RuleCall)cDecimalPartAssignment_2.eContents().get(0);
		
		//RealLiteral:
		//	intPart=INT '.' decimalPart=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//intPart=INT '.' decimalPart=INT
		public Group getGroup() { return cGroup; }
		
		//intPart=INT
		public Assignment getIntPartAssignment_0() { return cIntPartAssignment_0; }
		
		//INT
		public RuleCall getIntPartINTTerminalRuleCall_0_0() { return cIntPartINTTerminalRuleCall_0_0; }
		
		//'.'
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
		
		//decimalPart=INT
		public Assignment getDecimalPartAssignment_2() { return cDecimalPartAssignment_2; }
		
		//INT
		public RuleCall getDecimalPartINTTerminalRuleCall_2_0() { return cDecimalPartINTTerminalRuleCall_2_0; }
	}
	public class UnityObjectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "cs.queensu.ca.Unity.UnityObject");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cObjectKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cTypeMetaObjectCrossReference_3_0 = (CrossReference)cTypeAssignment_3.eContents().get(0);
		private final RuleCall cTypeMetaObjectIDTerminalRuleCall_3_0_1 = (RuleCall)cTypeMetaObjectCrossReference_3_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Alternatives cAlternatives_5 = (Alternatives)cGroup.eContents().get(5);
		private final Assignment cConfigurationsAssignment_5_0 = (Assignment)cAlternatives_5.eContents().get(0);
		private final RuleCall cConfigurationsConfigAssignmentParserRuleCall_5_0_0 = (RuleCall)cConfigurationsAssignment_5_0.eContents().get(0);
		private final Assignment cNewActionsAssignment_5_1 = (Assignment)cAlternatives_5.eContents().get(1);
		private final RuleCall cNewActionsActionParserRuleCall_5_1_0 = (RuleCall)cNewActionsAssignment_5_1.eContents().get(0);
		private final Assignment cOverrideActionsAssignment_5_2 = (Assignment)cAlternatives_5.eContents().get(2);
		private final RuleCall cOverrideActionsOverrideActionParserRuleCall_5_2_0 = (RuleCall)cOverrideActionsAssignment_5_2.eContents().get(0);
		private final Assignment cPropertiesAssignment_5_3 = (Assignment)cAlternatives_5.eContents().get(3);
		private final RuleCall cPropertiesAttributeParserRuleCall_5_3_0 = (RuleCall)cPropertiesAssignment_5_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		///*=====================================================================================================
		// * Object is an instance of MetaObject, which includes configuration, implementing 
		//  actions and commands defined in MetaObject.
		//  * 
		// =====================================================================================================*/ UnityObject:
		//	'Object' name=ID ':' type=[MetaObject]
		//	'{' (configurations+=ConfigAssignment
		//	| newActions+=Action
		//	| overrideActions+=OverrideAction
		//	| properties+=Attribute)*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Object' name=ID ':' type=[MetaObject] '{' (configurations+=ConfigAssignment | newActions+=Action |
		//overrideActions+=OverrideAction | properties+=Attribute)* '}'
		public Group getGroup() { return cGroup; }
		
		//'Object'
		public Keyword getObjectKeyword_0() { return cObjectKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//type=[MetaObject]
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }
		
		//[MetaObject]
		public CrossReference getTypeMetaObjectCrossReference_3_0() { return cTypeMetaObjectCrossReference_3_0; }
		
		//ID
		public RuleCall getTypeMetaObjectIDTerminalRuleCall_3_0_1() { return cTypeMetaObjectIDTerminalRuleCall_3_0_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//(configurations+=ConfigAssignment | newActions+=Action | overrideActions+=OverrideAction | properties+=Attribute)*
		public Alternatives getAlternatives_5() { return cAlternatives_5; }
		
		//configurations+=ConfigAssignment
		public Assignment getConfigurationsAssignment_5_0() { return cConfigurationsAssignment_5_0; }
		
		//ConfigAssignment
		public RuleCall getConfigurationsConfigAssignmentParserRuleCall_5_0_0() { return cConfigurationsConfigAssignmentParserRuleCall_5_0_0; }
		
		//newActions+=Action
		public Assignment getNewActionsAssignment_5_1() { return cNewActionsAssignment_5_1; }
		
		//Action
		public RuleCall getNewActionsActionParserRuleCall_5_1_0() { return cNewActionsActionParserRuleCall_5_1_0; }
		
		//overrideActions+=OverrideAction
		public Assignment getOverrideActionsAssignment_5_2() { return cOverrideActionsAssignment_5_2; }
		
		//OverrideAction
		public RuleCall getOverrideActionsOverrideActionParserRuleCall_5_2_0() { return cOverrideActionsOverrideActionParserRuleCall_5_2_0; }
		
		//properties+=Attribute
		public Assignment getPropertiesAssignment_5_3() { return cPropertiesAssignment_5_3; }
		
		//Attribute
		public RuleCall getPropertiesAttributeParserRuleCall_5_3_0() { return cPropertiesAttributeParserRuleCall_5_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class OverrideActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "cs.queensu.ca.Unity.OverrideAction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOverrideKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cActionNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cActionNameActionCrossReference_1_0 = (CrossReference)cActionNameAssignment_1.eContents().get(0);
		private final RuleCall cActionNameActionIDTerminalRuleCall_1_0_1 = (RuleCall)cActionNameActionCrossReference_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cExpressionsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExpressionsExpressionParserRuleCall_3_0 = (RuleCall)cExpressionsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//OverrideAction:
		//	'override' actionName=[Action]
		//	'{'
		//	expressions+=Expression*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'override' actionName=[Action] '{' expressions+=Expression* '}'
		public Group getGroup() { return cGroup; }
		
		//'override'
		public Keyword getOverrideKeyword_0() { return cOverrideKeyword_0; }
		
		//actionName=[Action]
		public Assignment getActionNameAssignment_1() { return cActionNameAssignment_1; }
		
		//[Action]
		public CrossReference getActionNameActionCrossReference_1_0() { return cActionNameActionCrossReference_1_0; }
		
		//ID
		public RuleCall getActionNameActionIDTerminalRuleCall_1_0_1() { return cActionNameActionIDTerminalRuleCall_1_0_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//expressions+=Expression*
		public Assignment getExpressionsAssignment_3() { return cExpressionsAssignment_3; }
		
		//Expression
		public RuleCall getExpressionsExpressionParserRuleCall_3_0() { return cExpressionsExpressionParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class ConfigAssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "cs.queensu.ca.Unity.ConfigAssignment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConfigKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Action cConfigAssignmentAction_2 = (Action)cGroup.eContents().get(2);
		private final Assignment cConfigsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cConfigsConfigParserRuleCall_3_0 = (RuleCall)cConfigsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ConfigAssignment:
		//	'config' '{' {ConfigAssignment} configs+=Config+
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'config' '{' {ConfigAssignment} configs+=Config+ '}'
		public Group getGroup() { return cGroup; }
		
		//'config'
		public Keyword getConfigKeyword_0() { return cConfigKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//{ConfigAssignment}
		public Action getConfigAssignmentAction_2() { return cConfigAssignmentAction_2; }
		
		//configs+=Config+
		public Assignment getConfigsAssignment_3() { return cConfigsAssignment_3; }
		
		//Config
		public RuleCall getConfigsConfigParserRuleCall_3_0() { return cConfigsConfigParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class ConfigElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "cs.queensu.ca.Unity.Config");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPropertyNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cPropertyNameAttributeCrossReference_0_0 = (CrossReference)cPropertyNameAssignment_0.eContents().get(0);
		private final RuleCall cPropertyNameAttributeIDTerminalRuleCall_0_0_1 = (RuleCall)cPropertyNameAttributeCrossReference_0_0.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cPropertyValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPropertyValueExpressionParserRuleCall_2_0 = (RuleCall)cPropertyValueAssignment_2.eContents().get(0);
		
		//Config:
		//	propertyName=[Attribute] '=' propertyValue=Expression;
		@Override public ParserRule getRule() { return rule; }
		
		//propertyName=[Attribute] '=' propertyValue=Expression
		public Group getGroup() { return cGroup; }
		
		//propertyName=[Attribute]
		public Assignment getPropertyNameAssignment_0() { return cPropertyNameAssignment_0; }
		
		//[Attribute]
		public CrossReference getPropertyNameAttributeCrossReference_0_0() { return cPropertyNameAttributeCrossReference_0_0; }
		
		//ID
		public RuleCall getPropertyNameAttributeIDTerminalRuleCall_0_0_1() { return cPropertyNameAttributeIDTerminalRuleCall_0_0_1; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//propertyValue=Expression
		public Assignment getPropertyValueAssignment_2() { return cPropertyValueAssignment_2; }
		
		//Expression
		public RuleCall getPropertyValueExpressionParserRuleCall_2_0() { return cPropertyValueExpressionParserRuleCall_2_0; }
	}
	public class ENVElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "cs.queensu.ca.Unity.ENV");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEnvKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Assignment cChannelsAssignment_3_0 = (Assignment)cAlternatives_3.eContents().get(0);
		private final RuleCall cChannelsChannelParserRuleCall_3_0_0 = (RuleCall)cChannelsAssignment_3_0.eContents().get(0);
		private final Assignment cMapsAssignment_3_1 = (Assignment)cAlternatives_3.eContents().get(1);
		private final RuleCall cMapsMapParserRuleCall_3_1_0 = (RuleCall)cMapsAssignment_3_1.eContents().get(0);
		private final Assignment cPropertiesAssignment_3_2 = (Assignment)cAlternatives_3.eContents().get(2);
		private final RuleCall cPropertiesPropertyParserRuleCall_3_2_0 = (RuleCall)cPropertiesAssignment_3_2.eContents().get(0);
		private final Assignment cInitCodesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cInitCodesInitParserRuleCall_4_0 = (RuleCall)cInitCodesAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		///*=====================================================================================================
		// * ENV 
		// =====================================================================================================*/ ENV:
		//	'Env' name=ID
		//	'{' (channels+=Channel
		//	| maps+=Map
		//	//|instances+=Instance
		//	| properties+=Property)*
		//	initCodes=Init?
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Env' name=ID '{' (channels+=Channel | maps+=Map //|instances+=Instance
		//| properties+=Property)* initCodes=Init? '}'
		public Group getGroup() { return cGroup; }
		
		//'Env'
		public Keyword getEnvKeyword_0() { return cEnvKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//(channels+=Channel | maps+=Map //|instances+=Instance
		//| properties+=Property)*
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//channels+=Channel
		public Assignment getChannelsAssignment_3_0() { return cChannelsAssignment_3_0; }
		
		//Channel
		public RuleCall getChannelsChannelParserRuleCall_3_0_0() { return cChannelsChannelParserRuleCall_3_0_0; }
		
		//maps+=Map
		public Assignment getMapsAssignment_3_1() { return cMapsAssignment_3_1; }
		
		//Map
		public RuleCall getMapsMapParserRuleCall_3_1_0() { return cMapsMapParserRuleCall_3_1_0; }
		
		//properties+=Property
		public Assignment getPropertiesAssignment_3_2() { return cPropertiesAssignment_3_2; }
		
		//Property
		public RuleCall getPropertiesPropertyParserRuleCall_3_2_0() { return cPropertiesPropertyParserRuleCall_3_2_0; }
		
		//initCodes=Init?
		public Assignment getInitCodesAssignment_4() { return cInitCodesAssignment_4; }
		
		//Init
		public RuleCall getInitCodesInitParserRuleCall_4_0() { return cInitCodesInitParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class InstanceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "cs.queensu.ca.Unity.Instance");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInstanceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cInstanceTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cInstanceTypeUnityObjectCrossReference_3_0 = (CrossReference)cInstanceTypeAssignment_3.eContents().get(0);
		private final RuleCall cInstanceTypeUnityObjectIDTerminalRuleCall_3_0_1 = (RuleCall)cInstanceTypeUnityObjectCrossReference_3_0.eContents().get(1);
		
		//Instance:
		//	'Instance' name=ID ':' instanceType=[UnityObject];
		@Override public ParserRule getRule() { return rule; }
		
		//'Instance' name=ID ':' instanceType=[UnityObject]
		public Group getGroup() { return cGroup; }
		
		//'Instance'
		public Keyword getInstanceKeyword_0() { return cInstanceKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//instanceType=[UnityObject]
		public Assignment getInstanceTypeAssignment_3() { return cInstanceTypeAssignment_3; }
		
		//[UnityObject]
		public CrossReference getInstanceTypeUnityObjectCrossReference_3_0() { return cInstanceTypeUnityObjectCrossReference_3_0; }
		
		//ID
		public RuleCall getInstanceTypeUnityObjectIDTerminalRuleCall_3_0_1() { return cInstanceTypeUnityObjectIDTerminalRuleCall_3_0_1; }
	}
	public class ChannelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "cs.queensu.ca.Unity.Channel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cChannelKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cInterfaceNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cInterfaceNameIDTerminalRuleCall_1_0 = (RuleCall)cInterfaceNameAssignment_1.eContents().get(0);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeInterfaceTypeParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCardinalityKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cCardinalityAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cCardinalityINTTerminalRuleCall_3_1_0 = (RuleCall)cCardinalityAssignment_3_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Alternatives cAlternatives_5 = (Alternatives)cGroup.eContents().get(5);
		private final Group cGroup_5_0 = (Group)cAlternatives_5.eContents().get(0);
		private final Assignment cIpAssignment_5_0_0 = (Assignment)cGroup_5_0.eContents().get(0);
		private final RuleCall cIpIDTerminalRuleCall_5_0_0_0 = (RuleCall)cIpAssignment_5_0_0.eContents().get(0);
		private final Keyword cCommaKeyword_5_0_1 = (Keyword)cGroup_5_0.eContents().get(1);
		private final Assignment cPortAssignment_5_0_2 = (Assignment)cGroup_5_0.eContents().get(2);
		private final RuleCall cPortPortParserRuleCall_5_0_2_0 = (RuleCall)cPortAssignment_5_0_2.eContents().get(0);
		private final Group cGroup_5_1 = (Group)cAlternatives_5.eContents().get(1);
		private final Assignment cAreanameAssignment_5_1_0 = (Assignment)cGroup_5_1.eContents().get(0);
		private final RuleCall cAreanameAreaNameParserRuleCall_5_1_0_0 = (RuleCall)cAreanameAssignment_5_1_0.eContents().get(0);
		private final Keyword cCommaKeyword_5_1_1 = (Keyword)cGroup_5_1.eContents().get(1);
		private final Assignment cQnameAssignment_5_1_2 = (Assignment)cGroup_5_1.eContents().get(2);
		private final RuleCall cQnameQNameParserRuleCall_5_1_2_0 = (RuleCall)cQnameAssignment_5_1_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Channel:
		//	'Channel' interfaceName=ID type=interfaceType ('cardinality' cardinality=INT)?
		//	'(' (ip=ID ',' port=Port | areaname=AreaName ',' qname=QName)
		//	')';
		@Override public ParserRule getRule() { return rule; }
		
		//'Channel' interfaceName=ID type=interfaceType ('cardinality' cardinality=INT)? '(' (ip=ID ',' port=Port |
		//areaname=AreaName ',' qname=QName) ')'
		public Group getGroup() { return cGroup; }
		
		//'Channel'
		public Keyword getChannelKeyword_0() { return cChannelKeyword_0; }
		
		//interfaceName=ID
		public Assignment getInterfaceNameAssignment_1() { return cInterfaceNameAssignment_1; }
		
		//ID
		public RuleCall getInterfaceNameIDTerminalRuleCall_1_0() { return cInterfaceNameIDTerminalRuleCall_1_0; }
		
		//type=interfaceType
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//interfaceType
		public RuleCall getTypeInterfaceTypeParserRuleCall_2_0() { return cTypeInterfaceTypeParserRuleCall_2_0; }
		
		//('cardinality' cardinality=INT)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'cardinality'
		public Keyword getCardinalityKeyword_3_0() { return cCardinalityKeyword_3_0; }
		
		//cardinality=INT
		public Assignment getCardinalityAssignment_3_1() { return cCardinalityAssignment_3_1; }
		
		//INT
		public RuleCall getCardinalityINTTerminalRuleCall_3_1_0() { return cCardinalityINTTerminalRuleCall_3_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_4() { return cLeftParenthesisKeyword_4; }
		
		//ip=ID ',' port=Port | areaname=AreaName ',' qname=QName
		public Alternatives getAlternatives_5() { return cAlternatives_5; }
		
		//ip=ID ',' port=Port
		public Group getGroup_5_0() { return cGroup_5_0; }
		
		//ip=ID
		public Assignment getIpAssignment_5_0_0() { return cIpAssignment_5_0_0; }
		
		//ID
		public RuleCall getIpIDTerminalRuleCall_5_0_0_0() { return cIpIDTerminalRuleCall_5_0_0_0; }
		
		//','
		public Keyword getCommaKeyword_5_0_1() { return cCommaKeyword_5_0_1; }
		
		//port=Port
		public Assignment getPortAssignment_5_0_2() { return cPortAssignment_5_0_2; }
		
		//Port
		public RuleCall getPortPortParserRuleCall_5_0_2_0() { return cPortPortParserRuleCall_5_0_2_0; }
		
		//areaname=AreaName ',' qname=QName
		public Group getGroup_5_1() { return cGroup_5_1; }
		
		//areaname=AreaName
		public Assignment getAreanameAssignment_5_1_0() { return cAreanameAssignment_5_1_0; }
		
		//AreaName
		public RuleCall getAreanameAreaNameParserRuleCall_5_1_0_0() { return cAreanameAreaNameParserRuleCall_5_1_0_0; }
		
		//','
		public Keyword getCommaKeyword_5_1_1() { return cCommaKeyword_5_1_1; }
		
		//qname=QName
		public Assignment getQnameAssignment_5_1_2() { return cQnameAssignment_5_1_2; }
		
		//QName
		public RuleCall getQnameQNameParserRuleCall_5_1_2_0() { return cQnameQNameParserRuleCall_5_1_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
	}
	public class InitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "cs.queensu.ca.Unity.Init");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConfigKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionsExpressionParserRuleCall_2_0 = (RuleCall)cExpressionsAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Init:
		//	'config' '{'
		//	expressions+=Expression*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'config' '{' expressions+=Expression* '}'
		public Group getGroup() { return cGroup; }
		
		//'config'
		public Keyword getConfigKeyword_0() { return cConfigKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//expressions+=Expression*
		public Assignment getExpressionsAssignment_2() { return cExpressionsAssignment_2; }
		
		//Expression
		public RuleCall getExpressionsExpressionParserRuleCall_2_0() { return cExpressionsExpressionParserRuleCall_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class MapElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "cs.queensu.ca.Unity.Map");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLoadKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cMapKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cMapNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMapNameIDTerminalRuleCall_2_0 = (RuleCall)cMapNameAssignment_2.eContents().get(0);
		private final Keyword cFromKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cPathNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cPathNameStLiteralParserRuleCall_4_0 = (RuleCall)cPathNameAssignment_4.eContents().get(0);
		
		//Map:
		//	'load' 'map' mapName=ID 'from' pathName=StLiteral;
		@Override public ParserRule getRule() { return rule; }
		
		//'load' 'map' mapName=ID 'from' pathName=StLiteral
		public Group getGroup() { return cGroup; }
		
		//'load'
		public Keyword getLoadKeyword_0() { return cLoadKeyword_0; }
		
		//'map'
		public Keyword getMapKeyword_1() { return cMapKeyword_1; }
		
		//mapName=ID
		public Assignment getMapNameAssignment_2() { return cMapNameAssignment_2; }
		
		//ID
		public RuleCall getMapNameIDTerminalRuleCall_2_0() { return cMapNameIDTerminalRuleCall_2_0; }
		
		//'from'
		public Keyword getFromKeyword_3() { return cFromKeyword_3; }
		
		//pathName=StLiteral
		public Assignment getPathNameAssignment_4() { return cPathNameAssignment_4; }
		
		//StLiteral
		public RuleCall getPathNameStLiteralParserRuleCall_4_0() { return cPathNameStLiteralParserRuleCall_4_0; }
	}
	public class MessageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "cs.queensu.ca.Unity.Message");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMessageKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cContentKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cColonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cContentAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cContentSTRINGTerminalRuleCall_5_0 = (RuleCall)cContentAssignment_5.eContents().get(0);
		
		//Message:
		//	'message' ':' name=ID 'content' ':' content=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'message' ':' name=ID 'content' ':' content=STRING
		public Group getGroup() { return cGroup; }
		
		//'message'
		public Keyword getMessageKeyword_0() { return cMessageKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//'content'
		public Keyword getContentKeyword_3() { return cContentKeyword_3; }
		
		//':'
		public Keyword getColonKeyword_4() { return cColonKeyword_4; }
		
		//content=STRING
		public Assignment getContentAssignment_5() { return cContentAssignment_5; }
		
		//STRING
		public RuleCall getContentSTRINGTerminalRuleCall_5_0() { return cContentSTRINGTerminalRuleCall_5_0; }
	}
	public class QNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "cs.queensu.ca.Unity.QName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cQnameKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//QName:
		//	'qname' ':' name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'qname' ':' name=ID
		public Group getGroup() { return cGroup; }
		
		//'qname'
		public Keyword getQnameKeyword_0() { return cQnameKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
	}
	public class AreaNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "cs.queensu.ca.Unity.AreaName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAreaKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//AreaName:
		//	'area' ':' name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'area' ':' name=ID
		public Group getGroup() { return cGroup; }
		
		//'area'
		public Keyword getAreaKeyword_0() { return cAreaKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
	}
	public class PortElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "cs.queensu.ca.Unity.Port");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPortKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cPortnumberKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cColonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cPortnumberAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cPortnumberINTTerminalRuleCall_5_0 = (RuleCall)cPortnumberAssignment_5.eContents().get(0);
		
		//Port:
		//	'port' ':' name=ID 'portnumber' ':' portnumber=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//'port' ':' name=ID 'portnumber' ':' portnumber=INT
		public Group getGroup() { return cGroup; }
		
		//'port'
		public Keyword getPortKeyword_0() { return cPortKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//'portnumber'
		public Keyword getPortnumberKeyword_3() { return cPortnumberKeyword_3; }
		
		//':'
		public Keyword getColonKeyword_4() { return cColonKeyword_4; }
		
		//portnumber=INT
		public Assignment getPortnumberAssignment_5() { return cPortnumberAssignment_5; }
		
		//INT
		public RuleCall getPortnumberINTTerminalRuleCall_5_0() { return cPortnumberINTTerminalRuleCall_5_0; }
	}
	public class InterfaceTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "cs.queensu.ca.Unity.interfaceType");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cNameAlternatives_0 = (Alternatives)cNameAssignment.eContents().get(0);
		private final Keyword cNameTCPKeyword_0_0 = (Keyword)cNameAlternatives_0.eContents().get(0);
		private final Keyword cNameIPCKeyword_0_1 = (Keyword)cNameAlternatives_0.eContents().get(1);
		
		//interfaceType:
		//	name=('TCP' | 'IPC');
		@Override public ParserRule getRule() { return rule; }
		
		//name=('TCP' | 'IPC')
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//('TCP' | 'IPC')
		public Alternatives getNameAlternatives_0() { return cNameAlternatives_0; }
		
		//'TCP'
		public Keyword getNameTCPKeyword_0_0() { return cNameTCPKeyword_0_0; }
		
		//'IPC'
		public Keyword getNameIPCKeyword_0_1() { return cNameIPCKeyword_0_1; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "cs.queensu.ca.Unity.Expression");
		private final RuleCall cAssignParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		///*=====================================================================================================
		// * Expressions
		// =====================================================================================================*/ Expression:
		//	Assign;
		@Override public ParserRule getRule() { return rule; }
		
		//Assign
		public RuleCall getAssignParserRuleCall() { return cAssignParserRuleCall; }
	}
	public class AssignElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "cs.queensu.ca.Unity.Assign");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cOrExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAssignLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightOrExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Assign Expression:
		//	OrExpression ({Assign.left=current} '=' right=OrExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//OrExpression ({Assign.left=current} '=' right=OrExpression)*
		public Group getGroup() { return cGroup; }
		
		//OrExpression
		public RuleCall getOrExpressionParserRuleCall_0() { return cOrExpressionParserRuleCall_0; }
		
		//({Assign.left=current} '=' right=OrExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Assign.left=current}
		public Action getAssignLeftAction_1_0() { return cAssignLeftAction_1_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1_1() { return cEqualsSignKeyword_1_1; }
		
		//right=OrExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//OrExpression
		public RuleCall getRightOrExpressionParserRuleCall_1_2_0() { return cRightOrExpressionParserRuleCall_1_2_0; }
	}
	public class OrExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "cs.queensu.ca.Unity.OrExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAndExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOrExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cOrKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightAndExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//OrExpression Expression:
		//	AndExpression ({OrExpression.left=current} 'or' right=AndExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//AndExpression ({OrExpression.left=current} 'or' right=AndExpression)*
		public Group getGroup() { return cGroup; }
		
		//AndExpression
		public RuleCall getAndExpressionParserRuleCall_0() { return cAndExpressionParserRuleCall_0; }
		
		//({OrExpression.left=current} 'or' right=AndExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{OrExpression.left=current}
		public Action getOrExpressionLeftAction_1_0() { return cOrExpressionLeftAction_1_0; }
		
		//'or'
		public Keyword getOrKeyword_1_1() { return cOrKeyword_1_1; }
		
		//right=AndExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//AndExpression
		public RuleCall getRightAndExpressionParserRuleCall_1_2_0() { return cRightAndExpressionParserRuleCall_1_2_0; }
	}
	public class AndExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "cs.queensu.ca.Unity.AndExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cComparisonOperatorsParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAndExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cAndKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightComparisonOperatorsParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//AndExpression Expression:
		//	ComparisonOperators ({AndExpression.left=current} 'and' right=ComparisonOperators)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ComparisonOperators ({AndExpression.left=current} 'and' right=ComparisonOperators)*
		public Group getGroup() { return cGroup; }
		
		//ComparisonOperators
		public RuleCall getComparisonOperatorsParserRuleCall_0() { return cComparisonOperatorsParserRuleCall_0; }
		
		//({AndExpression.left=current} 'and' right=ComparisonOperators)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{AndExpression.left=current}
		public Action getAndExpressionLeftAction_1_0() { return cAndExpressionLeftAction_1_0; }
		
		//'and'
		public Keyword getAndKeyword_1_1() { return cAndKeyword_1_1; }
		
		//right=ComparisonOperators
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//ComparisonOperators
		public RuleCall getRightComparisonOperatorsParserRuleCall_1_2_0() { return cRightComparisonOperatorsParserRuleCall_1_2_0; }
	}
	public class ComparisonOperatorsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "cs.queensu.ca.Unity.ComparisonOperators");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAdditionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Alternatives cAlternatives_1_0_0 = (Alternatives)cGroup_1_0.eContents().get(0);
		private final Group cGroup_1_0_0_0 = (Group)cAlternatives_1_0_0.eContents().get(0);
		private final Action cGTLeftAction_1_0_0_0_0 = (Action)cGroup_1_0_0_0.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_1_0_0_0_1 = (Keyword)cGroup_1_0_0_0.eContents().get(1);
		private final Group cGroup_1_0_0_1 = (Group)cAlternatives_1_0_0.eContents().get(1);
		private final Action cLTLeftAction_1_0_0_1_0 = (Action)cGroup_1_0_0_1.eContents().get(0);
		private final Keyword cLessThanSignKeyword_1_0_0_1_1 = (Keyword)cGroup_1_0_0_1.eContents().get(1);
		private final Group cGroup_1_0_0_2 = (Group)cAlternatives_1_0_0.eContents().get(2);
		private final Action cGELeftAction_1_0_0_2_0 = (Action)cGroup_1_0_0_2.eContents().get(0);
		private final Keyword cGreaterThanSignEqualsSignKeyword_1_0_0_2_1 = (Keyword)cGroup_1_0_0_2.eContents().get(1);
		private final Group cGroup_1_0_0_3 = (Group)cAlternatives_1_0_0.eContents().get(3);
		private final Action cLELeftAction_1_0_0_3_0 = (Action)cGroup_1_0_0_3.eContents().get(0);
		private final Keyword cLessThanSignEqualsSignKeyword_1_0_0_3_1 = (Keyword)cGroup_1_0_0_3.eContents().get(1);
		private final Group cGroup_1_0_0_4 = (Group)cAlternatives_1_0_0.eContents().get(4);
		private final Action cEQLeftAction_1_0_0_4_0 = (Action)cGroup_1_0_0_4.eContents().get(0);
		private final Keyword cEqualsSignEqualsSignKeyword_1_0_0_4_1 = (Keyword)cGroup_1_0_0_4.eContents().get(1);
		private final Group cGroup_1_0_0_5 = (Group)cAlternatives_1_0_0.eContents().get(5);
		private final Action cNELeftAction_1_0_0_5_0 = (Action)cGroup_1_0_0_5.eContents().get(0);
		private final Keyword cExclamationMarkEqualsSignKeyword_1_0_0_5_1 = (Keyword)cGroup_1_0_0_5.eContents().get(1);
		private final Assignment cRestAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRestAdditionParserRuleCall_1_1_0 = (RuleCall)cRestAssignment_1_1.eContents().get(0);
		
		//ComparisonOperators Expression:
		//	Addition (=>
		//	({GT.left=current} ">" // Greater Than
		//	| {LT.left=current} "<" // Lower Than
		//	| {GE.left=current} ">=" // Greater or Equal
		//	| {LE.left=current} "<=" // Lower or Equal
		//	| {EQ.left=current} "==" // Equal
		//	| {NE.left=current} "!=" // Not Equal
		//) rest=Addition)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Addition (=> ({GT.left=current} ">" // Greater Than
		//| {LT.left=current} "<" // Lower Than
		//| {GE.left=current} ">=" // Greater or Equal
		//| {LE.left=current} "<=" // Lower or Equal
		//| {EQ.left=current} "==" // Equal
		//| {NE.left=current} "!=" // Not Equal
		//) rest=Addition)*
		public Group getGroup() { return cGroup; }
		
		//Addition
		public RuleCall getAdditionParserRuleCall_0() { return cAdditionParserRuleCall_0; }
		
		//(=> ({GT.left=current} ">" // Greater Than
		//| {LT.left=current} "<" // Lower Than
		//| {GE.left=current} ">=" // Greater or Equal
		//| {LE.left=current} "<=" // Lower or Equal
		//| {EQ.left=current} "==" // Equal
		//| {NE.left=current} "!=" // Not Equal
		//) rest=Addition)*
		public Group getGroup_1() { return cGroup_1; }
		
		//=> ({GT.left=current} ">" // Greater Than
		//| {LT.left=current} "<" // Lower Than
		//| {GE.left=current} ">=" // Greater or Equal
		//| {LE.left=current} "<=" // Lower or Equal
		//| {EQ.left=current} "==" // Equal
		//| {NE.left=current} "!=" // Not Equal
		//)
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//{GT.left=current} ">" // Greater Than
		//| {LT.left=current} "<" // Lower Than
		//| {GE.left=current} ">=" // Greater or Equal
		//| {LE.left=current} "<=" // Lower or Equal
		//| {EQ.left=current} "==" // Equal
		//| {NE.left=current} "!="
		public Alternatives getAlternatives_1_0_0() { return cAlternatives_1_0_0; }
		
		//{GT.left=current} ">"
		public Group getGroup_1_0_0_0() { return cGroup_1_0_0_0; }
		
		//{GT.left=current}
		public Action getGTLeftAction_1_0_0_0_0() { return cGTLeftAction_1_0_0_0_0; }
		
		//">"
		public Keyword getGreaterThanSignKeyword_1_0_0_0_1() { return cGreaterThanSignKeyword_1_0_0_0_1; }
		
		//{LT.left=current} "<"
		public Group getGroup_1_0_0_1() { return cGroup_1_0_0_1; }
		
		//{LT.left=current}
		public Action getLTLeftAction_1_0_0_1_0() { return cLTLeftAction_1_0_0_1_0; }
		
		//"<"
		public Keyword getLessThanSignKeyword_1_0_0_1_1() { return cLessThanSignKeyword_1_0_0_1_1; }
		
		//{GE.left=current} ">="
		public Group getGroup_1_0_0_2() { return cGroup_1_0_0_2; }
		
		//{GE.left=current}
		public Action getGELeftAction_1_0_0_2_0() { return cGELeftAction_1_0_0_2_0; }
		
		//">="
		public Keyword getGreaterThanSignEqualsSignKeyword_1_0_0_2_1() { return cGreaterThanSignEqualsSignKeyword_1_0_0_2_1; }
		
		//{LE.left=current} "<="
		public Group getGroup_1_0_0_3() { return cGroup_1_0_0_3; }
		
		//{LE.left=current}
		public Action getLELeftAction_1_0_0_3_0() { return cLELeftAction_1_0_0_3_0; }
		
		//"<="
		public Keyword getLessThanSignEqualsSignKeyword_1_0_0_3_1() { return cLessThanSignEqualsSignKeyword_1_0_0_3_1; }
		
		//{EQ.left=current} "=="
		public Group getGroup_1_0_0_4() { return cGroup_1_0_0_4; }
		
		//{EQ.left=current}
		public Action getEQLeftAction_1_0_0_4_0() { return cEQLeftAction_1_0_0_4_0; }
		
		//"=="
		public Keyword getEqualsSignEqualsSignKeyword_1_0_0_4_1() { return cEqualsSignEqualsSignKeyword_1_0_0_4_1; }
		
		//{NE.left=current} "!="
		public Group getGroup_1_0_0_5() { return cGroup_1_0_0_5; }
		
		//{NE.left=current}
		public Action getNELeftAction_1_0_0_5_0() { return cNELeftAction_1_0_0_5_0; }
		
		//"!="
		public Keyword getExclamationMarkEqualsSignKeyword_1_0_0_5_1() { return cExclamationMarkEqualsSignKeyword_1_0_0_5_1; }
		
		//rest=Addition
		public Assignment getRestAssignment_1_1() { return cRestAssignment_1_1; }
		
		//Addition
		public RuleCall getRestAdditionParserRuleCall_1_1_0() { return cRestAdditionParserRuleCall_1_1_0; }
	}
	public class AdditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "cs.queensu.ca.Unity.Addition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMultiplicationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Alternatives cAlternatives_1_0_0 = (Alternatives)cGroup_1_0.eContents().get(0);
		private final Group cGroup_1_0_0_0 = (Group)cAlternatives_1_0_0.eContents().get(0);
		private final Action cAdditionLeftAction_1_0_0_0_0 = (Action)cGroup_1_0_0_0.eContents().get(0);
		private final Keyword cPlusSignKeyword_1_0_0_0_1 = (Keyword)cGroup_1_0_0_0.eContents().get(1);
		private final Group cGroup_1_0_0_1 = (Group)cAlternatives_1_0_0.eContents().get(1);
		private final Action cMinusLeftAction_1_0_0_1_0 = (Action)cGroup_1_0_0_1.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1_0_0_1_1 = (Keyword)cGroup_1_0_0_1.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightMultiplicationParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//Addition Expression:
		//	Multiplication (=> ({Addition.left=current} '+'
		//	| {Minus.left=current} '-') right=Multiplication)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Multiplication (=> ({Addition.left=current} '+' | {Minus.left=current} '-') right=Multiplication)*
		public Group getGroup() { return cGroup; }
		
		//Multiplication
		public RuleCall getMultiplicationParserRuleCall_0() { return cMultiplicationParserRuleCall_0; }
		
		//(=> ({Addition.left=current} '+' | {Minus.left=current} '-') right=Multiplication)*
		public Group getGroup_1() { return cGroup_1; }
		
		//=> ({Addition.left=current} '+' | {Minus.left=current} '-')
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//{Addition.left=current} '+' | {Minus.left=current} '-'
		public Alternatives getAlternatives_1_0_0() { return cAlternatives_1_0_0; }
		
		//{Addition.left=current} '+'
		public Group getGroup_1_0_0_0() { return cGroup_1_0_0_0; }
		
		//{Addition.left=current}
		public Action getAdditionLeftAction_1_0_0_0_0() { return cAdditionLeftAction_1_0_0_0_0; }
		
		//'+'
		public Keyword getPlusSignKeyword_1_0_0_0_1() { return cPlusSignKeyword_1_0_0_0_1; }
		
		//{Minus.left=current} '-'
		public Group getGroup_1_0_0_1() { return cGroup_1_0_0_1; }
		
		//{Minus.left=current}
		public Action getMinusLeftAction_1_0_0_1_0() { return cMinusLeftAction_1_0_0_1_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_1_0_0_1_1() { return cHyphenMinusKeyword_1_0_0_1_1; }
		
		//right=Multiplication
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//Multiplication
		public RuleCall getRightMultiplicationParserRuleCall_1_1_0() { return cRightMultiplicationParserRuleCall_1_1_0; }
	}
	public class MultiplicationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "cs.queensu.ca.Unity.Multiplication");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUnaryParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Alternatives cAlternatives_1_0_0 = (Alternatives)cGroup_1_0.eContents().get(0);
		private final Group cGroup_1_0_0_0 = (Group)cAlternatives_1_0_0.eContents().get(0);
		private final Action cMultiplicationLeftAction_1_0_0_0_0 = (Action)cGroup_1_0_0_0.eContents().get(0);
		private final Keyword cAsteriskKeyword_1_0_0_0_1 = (Keyword)cGroup_1_0_0_0.eContents().get(1);
		private final Group cGroup_1_0_0_1 = (Group)cAlternatives_1_0_0.eContents().get(1);
		private final Action cDivideLeftAction_1_0_0_1_0 = (Action)cGroup_1_0_0_1.eContents().get(0);
		private final Keyword cSolidusKeyword_1_0_0_1_1 = (Keyword)cGroup_1_0_0_1.eContents().get(1);
		private final Group cGroup_1_0_0_2 = (Group)cAlternatives_1_0_0.eContents().get(2);
		private final Action cModuloLeftAction_1_0_0_2_0 = (Action)cGroup_1_0_0_2.eContents().get(0);
		private final Keyword cPercentSignKeyword_1_0_0_2_1 = (Keyword)cGroup_1_0_0_2.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightUnaryParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//Multiplication Expression:
		//	Unary (=> ({Multiplication.left=current} '*'
		//	| {Divide.left=current} '/'
		//	| {Modulo.left=current} '%') right=Unary)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Unary (=> ({Multiplication.left=current} '*' | {Divide.left=current} '/' | {Modulo.left=current} '%') right=Unary)*
		public Group getGroup() { return cGroup; }
		
		//Unary
		public RuleCall getUnaryParserRuleCall_0() { return cUnaryParserRuleCall_0; }
		
		//(=> ({Multiplication.left=current} '*' | {Divide.left=current} '/' | {Modulo.left=current} '%') right=Unary)*
		public Group getGroup_1() { return cGroup_1; }
		
		//=> ({Multiplication.left=current} '*' | {Divide.left=current} '/' | {Modulo.left=current} '%')
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//{Multiplication.left=current} '*' | {Divide.left=current} '/' | {Modulo.left=current} '%'
		public Alternatives getAlternatives_1_0_0() { return cAlternatives_1_0_0; }
		
		//{Multiplication.left=current} '*'
		public Group getGroup_1_0_0_0() { return cGroup_1_0_0_0; }
		
		//{Multiplication.left=current}
		public Action getMultiplicationLeftAction_1_0_0_0_0() { return cMultiplicationLeftAction_1_0_0_0_0; }
		
		//'*'
		public Keyword getAsteriskKeyword_1_0_0_0_1() { return cAsteriskKeyword_1_0_0_0_1; }
		
		//{Divide.left=current} '/'
		public Group getGroup_1_0_0_1() { return cGroup_1_0_0_1; }
		
		//{Divide.left=current}
		public Action getDivideLeftAction_1_0_0_1_0() { return cDivideLeftAction_1_0_0_1_0; }
		
		//'/'
		public Keyword getSolidusKeyword_1_0_0_1_1() { return cSolidusKeyword_1_0_0_1_1; }
		
		//{Modulo.left=current} '%'
		public Group getGroup_1_0_0_2() { return cGroup_1_0_0_2; }
		
		//{Modulo.left=current}
		public Action getModuloLeftAction_1_0_0_2_0() { return cModuloLeftAction_1_0_0_2_0; }
		
		//'%'
		public Keyword getPercentSignKeyword_1_0_0_2_1() { return cPercentSignKeyword_1_0_0_2_1; }
		
		//right=Unary
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//Unary
		public RuleCall getRightUnaryParserRuleCall_1_1_0() { return cRightUnaryParserRuleCall_1_1_0; }
	}
	public class UnaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "cs.queensu.ca.Unity.Unary");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cUnaryExpressionNotPlusMinusParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cUnaryExpressionAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cExpAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cExpUnaryParserRuleCall_1_2_0 = (RuleCall)cExpAssignment_1_2.eContents().get(0);
		
		//Unary Expression:
		//	UnaryExpressionNotPlusMinus
		//	| {UnaryExpression} '-' exp=Unary;
		@Override public ParserRule getRule() { return rule; }
		
		//UnaryExpressionNotPlusMinus | {UnaryExpression} '-' exp=Unary
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//UnaryExpressionNotPlusMinus
		public RuleCall getUnaryExpressionNotPlusMinusParserRuleCall_0() { return cUnaryExpressionNotPlusMinusParserRuleCall_0; }
		
		//{UnaryExpression} '-' exp=Unary
		public Group getGroup_1() { return cGroup_1; }
		
		//{UnaryExpression}
		public Action getUnaryExpressionAction_1_0() { return cUnaryExpressionAction_1_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_1_1() { return cHyphenMinusKeyword_1_1; }
		
		//exp=Unary
		public Assignment getExpAssignment_1_2() { return cExpAssignment_1_2; }
		
		//Unary
		public RuleCall getExpUnaryParserRuleCall_1_2_0() { return cExpUnaryParserRuleCall_1_2_0; }
	}
	public class UnaryExpressionNotPlusMinusElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "cs.queensu.ca.Unity.UnaryExpressionNotPlusMinus");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNotBooleanExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPrimaryExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//UnaryExpressionNotPlusMinus Expression:
		//	NotBooleanExpression
		//	| PrimaryExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//NotBooleanExpression | PrimaryExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//NotBooleanExpression
		public RuleCall getNotBooleanExpressionParserRuleCall_0() { return cNotBooleanExpressionParserRuleCall_0; }
		
		//PrimaryExpression
		public RuleCall getPrimaryExpressionParserRuleCall_1() { return cPrimaryExpressionParserRuleCall_1; }
	}
	public class NotBooleanExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "cs.queensu.ca.Unity.NotBooleanExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExclamationMarkKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpUnaryParserRuleCall_1_0 = (RuleCall)cExpAssignment_1.eContents().get(0);
		
		//NotBooleanExpression:
		//	'!' exp=Unary;
		@Override public ParserRule getRule() { return rule; }
		
		//'!' exp=Unary
		public Group getGroup() { return cGroup; }
		
		//'!'
		public Keyword getExclamationMarkKeyword_0() { return cExclamationMarkKeyword_0; }
		
		//exp=Unary
		public Assignment getExpAssignment_1() { return cExpAssignment_1; }
		
		//Unary
		public RuleCall getExpUnaryParserRuleCall_1_0() { return cExpUnaryParserRuleCall_1_0; }
	}
	public class PrimaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "cs.queensu.ca.Unity.PrimaryExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLiteralOrIdentifierParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//PrimaryExpression Expression:
		//	LiteralOrIdentifier
		//	| '(' Expression ')';
		@Override public ParserRule getRule() { return rule; }
		
		//LiteralOrIdentifier | '(' Expression ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//LiteralOrIdentifier
		public RuleCall getLiteralOrIdentifierParserRuleCall_0() { return cLiteralOrIdentifierParserRuleCall_0; }
		
		//'(' Expression ')'
		public Group getGroup_1() { return cGroup_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall_1_1() { return cExpressionParserRuleCall_1_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }
	}
	public class LiteralOrIdentifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "cs.queensu.ca.Unity.LiteralOrIdentifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLiteralParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIdentifierParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//LiteralOrIdentifier Expression:
		//	Literal
		//	| Identifier;
		@Override public ParserRule getRule() { return rule; }
		
		//Literal | Identifier
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Literal
		public RuleCall getLiteralParserRuleCall_0() { return cLiteralParserRuleCall_0; }
		
		//Identifier
		public RuleCall getIdentifierParserRuleCall_1() { return cIdentifierParserRuleCall_1; }
	}
	public class LiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "cs.queensu.ca.Unity.Literal");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIntLiteralParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBoolLiteralParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cStLiteralParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cRealLiteralParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Literal:
		//	IntLiteral
		//	| BoolLiteral
		//	| StLiteral
		//	| RealLiteral;
		@Override public ParserRule getRule() { return rule; }
		
		//IntLiteral | BoolLiteral | StLiteral | RealLiteral
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//IntLiteral
		public RuleCall getIntLiteralParserRuleCall_0() { return cIntLiteralParserRuleCall_0; }
		
		//BoolLiteral
		public RuleCall getBoolLiteralParserRuleCall_1() { return cBoolLiteralParserRuleCall_1; }
		
		//StLiteral
		public RuleCall getStLiteralParserRuleCall_2() { return cStLiteralParserRuleCall_2; }
		
		//RealLiteral
		public RuleCall getRealLiteralParserRuleCall_3() { return cRealLiteralParserRuleCall_3; }
	}
	public class IntLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "cs.queensu.ca.Unity.IntLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIntLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cIntAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIntINTTerminalRuleCall_1_0 = (RuleCall)cIntAssignment_1.eContents().get(0);
		
		//IntLiteral:
		//	{IntLiteral} int=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//{IntLiteral} int=INT
		public Group getGroup() { return cGroup; }
		
		//{IntLiteral}
		public Action getIntLiteralAction_0() { return cIntLiteralAction_0; }
		
		//int=INT
		public Assignment getIntAssignment_1() { return cIntAssignment_1; }
		
		//INT
		public RuleCall getIntINTTerminalRuleCall_1_0() { return cIntINTTerminalRuleCall_1_0; }
	}
	public class BoolLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "cs.queensu.ca.Unity.BoolLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBoolLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cBoolAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBoolBOOLEANTerminalRuleCall_1_0 = (RuleCall)cBoolAssignment_1.eContents().get(0);
		
		//BoolLiteral:
		//	{BoolLiteral} bool=BOOLEAN;
		@Override public ParserRule getRule() { return rule; }
		
		//{BoolLiteral} bool=BOOLEAN
		public Group getGroup() { return cGroup; }
		
		//{BoolLiteral}
		public Action getBoolLiteralAction_0() { return cBoolLiteralAction_0; }
		
		//bool=BOOLEAN
		public Assignment getBoolAssignment_1() { return cBoolAssignment_1; }
		
		//BOOLEAN
		public RuleCall getBoolBOOLEANTerminalRuleCall_1_0() { return cBoolBOOLEANTerminalRuleCall_1_0; }
	}
	public class StLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "cs.queensu.ca.Unity.StLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cStringAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cStringSTRINGTerminalRuleCall_1_0 = (RuleCall)cStringAssignment_1.eContents().get(0);
		
		//StLiteral:
		//	{StLiteral} string=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//{StLiteral} string=STRING
		public Group getGroup() { return cGroup; }
		
		//{StLiteral}
		public Action getStLiteralAction_0() { return cStLiteralAction_0; }
		
		//string=STRING
		public Assignment getStringAssignment_1() { return cStringAssignment_1; }
		
		//STRING
		public RuleCall getStringSTRINGTerminalRuleCall_1_0() { return cStringSTRINGTerminalRuleCall_1_0; }
	}
	public class IdentifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "cs.queensu.ca.Unity.Identifier");
		private final Assignment cRefrenceAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cRefrenceDotExpressionParserRuleCall_0 = (RuleCall)cRefrenceAssignment.eContents().get(0);
		
		//Identifier:
		//	Refrence=DotExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//Refrence=DotExpression
		public Assignment getRefrenceAssignment() { return cRefrenceAssignment; }
		
		//DotExpression
		public RuleCall getRefrenceDotExpressionParserRuleCall_0() { return cRefrenceDotExpressionParserRuleCall_0; }
	}
	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "cs.queensu.ca.Unity.QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedName:
		//	ID ('.' ID)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ID ('.' ID)*
		public Group getGroup() { return cGroup; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//('.' ID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	
	
	private final SpecificationElements pSpecification;
	private final MetaObjectElements pMetaObject;
	private final ActionElements pAction;
	private final PayloadElements pPayload;
	private final ParamElements pParam;
	private final DotExpressionElements pDotExpression;
	private final SingleRefElements pSingleRef;
	private final PropertyElements pProperty;
	private final AttributeElements pAttribute;
	private final VarTypeElements pVarType;
	private final RangeElements pRange;
	private final ValueElements pValue;
	private final RealLiteralElements pRealLiteral;
	private final UnityObjectElements pUnityObject;
	private final OverrideActionElements pOverrideAction;
	private final ConfigAssignmentElements pConfigAssignment;
	private final ConfigElements pConfig;
	private final ENVElements pENV;
	private final InstanceElements pInstance;
	private final ChannelElements pChannel;
	private final InitElements pInit;
	private final MapElements pMap;
	private final MessageElements pMessage;
	private final QNameElements pQName;
	private final AreaNameElements pAreaName;
	private final PortElements pPort;
	private final InterfaceTypeElements pInterfaceType;
	private final ExpressionElements pExpression;
	private final AssignElements pAssign;
	private final OrExpressionElements pOrExpression;
	private final AndExpressionElements pAndExpression;
	private final ComparisonOperatorsElements pComparisonOperators;
	private final AdditionElements pAddition;
	private final MultiplicationElements pMultiplication;
	private final UnaryElements pUnary;
	private final UnaryExpressionNotPlusMinusElements pUnaryExpressionNotPlusMinus;
	private final NotBooleanExpressionElements pNotBooleanExpression;
	private final PrimaryExpressionElements pPrimaryExpression;
	private final LiteralOrIdentifierElements pLiteralOrIdentifier;
	private final LiteralElements pLiteral;
	private final IntLiteralElements pIntLiteral;
	private final BoolLiteralElements pBoolLiteral;
	private final TerminalRule tBOOLEAN;
	private final StLiteralElements pStLiteral;
	private final IdentifierElements pIdentifier;
	private final QualifiedNameElements pQualifiedName;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public UnityGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pSpecification = new SpecificationElements();
		this.pMetaObject = new MetaObjectElements();
		this.pAction = new ActionElements();
		this.pPayload = new PayloadElements();
		this.pParam = new ParamElements();
		this.pDotExpression = new DotExpressionElements();
		this.pSingleRef = new SingleRefElements();
		this.pProperty = new PropertyElements();
		this.pAttribute = new AttributeElements();
		this.pVarType = new VarTypeElements();
		this.pRange = new RangeElements();
		this.pValue = new ValueElements();
		this.pRealLiteral = new RealLiteralElements();
		this.pUnityObject = new UnityObjectElements();
		this.pOverrideAction = new OverrideActionElements();
		this.pConfigAssignment = new ConfigAssignmentElements();
		this.pConfig = new ConfigElements();
		this.pENV = new ENVElements();
		this.pInstance = new InstanceElements();
		this.pChannel = new ChannelElements();
		this.pInit = new InitElements();
		this.pMap = new MapElements();
		this.pMessage = new MessageElements();
		this.pQName = new QNameElements();
		this.pAreaName = new AreaNameElements();
		this.pPort = new PortElements();
		this.pInterfaceType = new InterfaceTypeElements();
		this.pExpression = new ExpressionElements();
		this.pAssign = new AssignElements();
		this.pOrExpression = new OrExpressionElements();
		this.pAndExpression = new AndExpressionElements();
		this.pComparisonOperators = new ComparisonOperatorsElements();
		this.pAddition = new AdditionElements();
		this.pMultiplication = new MultiplicationElements();
		this.pUnary = new UnaryElements();
		this.pUnaryExpressionNotPlusMinus = new UnaryExpressionNotPlusMinusElements();
		this.pNotBooleanExpression = new NotBooleanExpressionElements();
		this.pPrimaryExpression = new PrimaryExpressionElements();
		this.pLiteralOrIdentifier = new LiteralOrIdentifierElements();
		this.pLiteral = new LiteralElements();
		this.pIntLiteral = new IntLiteralElements();
		this.pBoolLiteral = new BoolLiteralElements();
		this.tBOOLEAN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "cs.queensu.ca.Unity.BOOLEAN");
		this.pStLiteral = new StLiteralElements();
		this.pIdentifier = new IdentifierElements();
		this.pQualifiedName = new QualifiedNameElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("cs.queensu.ca.Unity".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Specification:
	//	spec+=(UnityObject | MetaObject | ENV)*;
	public SpecificationElements getSpecificationAccess() {
		return pSpecification;
	}
	
	public ParserRule getSpecificationRule() {
		return getSpecificationAccess().getRule();
	}
	
	///*=====================================================================================================
	// * MetaObject defines properties, actions, and commands
	// * Property rule has a pattern such as Speed : int range ( 1 .. 300); 
	// * Action rule includes input, output, and expressions
	// * Command rule can defines commands such as command c1(parm1:bool,parm1:int) returns out:boolean;
	// =====================================================================================================*/ MetaObject:
	//	'MetaObject' name=ID ':' kind=('car' | 'rover' | 'others')
	//	'{' (properties+=Attribute
	//	| actions+=Action)*
	//	'}';
	public MetaObjectElements getMetaObjectAccess() {
		return pMetaObject;
	}
	
	public ParserRule getMetaObjectRule() {
		return getMetaObjectAccess().getRule();
	}
	
	//Action:
	//	'Action' name=ID '(' payload=Payload? ')' ('return' '(' returnPayload=Payload? ')')
	//	'{'
	//	expressions+=Expression*
	//	'}';
	public ActionElements getActionAccess() {
		return pAction;
	}
	
	public ParserRule getActionRule() {
		return getActionAccess().getRule();
	}
	
	//Payload:
	//	params+=Param (',' params+=Param)*;
	public PayloadElements getPayloadAccess() {
		return pPayload;
	}
	
	public ParserRule getPayloadRule() {
		return getPayloadAccess().getRule();
	}
	
	//Param:
	//	name=ID ':' type=VarType;
	public ParamElements getParamAccess() {
		return pParam;
	}
	
	public ParserRule getParamRule() {
		return getParamAccess().getRule();
	}
	
	//DotExpression Ref:
	//	SingleRef ({DotExpression.head=current} "." tail=[Property])*;
	public DotExpressionElements getDotExpressionAccess() {
		return pDotExpression;
	}
	
	public ParserRule getDotExpressionRule() {
		return getDotExpressionAccess().getRule();
	}
	
	//SingleRef:
	//	{SingleRef} SingleRef=[Property];
	public SingleRefElements getSingleRefAccess() {
		return pSingleRef;
	}
	
	public ParserRule getSingleRefRule() {
		return getSingleRefAccess().getRule();
	}
	
	//Property:
	//	Attribute | Instance | Param;
	public PropertyElements getPropertyAccess() {
		return pProperty;
	}
	
	public ParserRule getPropertyRule() {
		return getPropertyAccess().getRule();
	}
	
	//Attribute:
	//	'property' name=ID ':' propertyType=VarType ('range' range=Range)?;
	public AttributeElements getAttributeAccess() {
		return pAttribute;
	}
	
	public ParserRule getAttributeRule() {
		return getAttributeAccess().getRule();
	}
	
	//VarType:
	//	name=('bool' | 'int' | 'string' | 'real');
	public VarTypeElements getVarTypeAccess() {
		return pVarType;
	}
	
	public ParserRule getVarTypeRule() {
		return getVarTypeAccess().getRule();
	}
	
	//Range:
	//	'('
	//	from=Value '-' to=Value
	//	')';
	public RangeElements getRangeAccess() {
		return pRange;
	}
	
	public ParserRule getRangeRule() {
		return getRangeAccess().getRule();
	}
	
	//Value:
	//	minues?='-'?
	//	value=INT
	//	| fixedPointValue=RealLiteral;
	public ValueElements getValueAccess() {
		return pValue;
	}
	
	public ParserRule getValueRule() {
		return getValueAccess().getRule();
	}
	
	//RealLiteral:
	//	intPart=INT '.' decimalPart=INT;
	public RealLiteralElements getRealLiteralAccess() {
		return pRealLiteral;
	}
	
	public ParserRule getRealLiteralRule() {
		return getRealLiteralAccess().getRule();
	}
	
	///*=====================================================================================================
	// * Object is an instance of MetaObject, which includes configuration, implementing 
	//  actions and commands defined in MetaObject.
	//  * 
	// =====================================================================================================*/ UnityObject:
	//	'Object' name=ID ':' type=[MetaObject]
	//	'{' (configurations+=ConfigAssignment
	//	| newActions+=Action
	//	| overrideActions+=OverrideAction
	//	| properties+=Attribute)*
	//	'}';
	public UnityObjectElements getUnityObjectAccess() {
		return pUnityObject;
	}
	
	public ParserRule getUnityObjectRule() {
		return getUnityObjectAccess().getRule();
	}
	
	//OverrideAction:
	//	'override' actionName=[Action]
	//	'{'
	//	expressions+=Expression*
	//	'}';
	public OverrideActionElements getOverrideActionAccess() {
		return pOverrideAction;
	}
	
	public ParserRule getOverrideActionRule() {
		return getOverrideActionAccess().getRule();
	}
	
	//ConfigAssignment:
	//	'config' '{' {ConfigAssignment} configs+=Config+
	//	'}';
	public ConfigAssignmentElements getConfigAssignmentAccess() {
		return pConfigAssignment;
	}
	
	public ParserRule getConfigAssignmentRule() {
		return getConfigAssignmentAccess().getRule();
	}
	
	//Config:
	//	propertyName=[Attribute] '=' propertyValue=Expression;
	public ConfigElements getConfigAccess() {
		return pConfig;
	}
	
	public ParserRule getConfigRule() {
		return getConfigAccess().getRule();
	}
	
	///*=====================================================================================================
	// * ENV 
	// =====================================================================================================*/ ENV:
	//	'Env' name=ID
	//	'{' (channels+=Channel
	//	| maps+=Map
	//	//|instances+=Instance
	//	| properties+=Property)*
	//	initCodes=Init?
	//	'}';
	public ENVElements getENVAccess() {
		return pENV;
	}
	
	public ParserRule getENVRule() {
		return getENVAccess().getRule();
	}
	
	//Instance:
	//	'Instance' name=ID ':' instanceType=[UnityObject];
	public InstanceElements getInstanceAccess() {
		return pInstance;
	}
	
	public ParserRule getInstanceRule() {
		return getInstanceAccess().getRule();
	}
	
	//Channel:
	//	'Channel' interfaceName=ID type=interfaceType ('cardinality' cardinality=INT)?
	//	'(' (ip=ID ',' port=Port | areaname=AreaName ',' qname=QName)
	//	')';
	public ChannelElements getChannelAccess() {
		return pChannel;
	}
	
	public ParserRule getChannelRule() {
		return getChannelAccess().getRule();
	}
	
	//Init:
	//	'config' '{'
	//	expressions+=Expression*
	//	'}';
	public InitElements getInitAccess() {
		return pInit;
	}
	
	public ParserRule getInitRule() {
		return getInitAccess().getRule();
	}
	
	//Map:
	//	'load' 'map' mapName=ID 'from' pathName=StLiteral;
	public MapElements getMapAccess() {
		return pMap;
	}
	
	public ParserRule getMapRule() {
		return getMapAccess().getRule();
	}
	
	//Message:
	//	'message' ':' name=ID 'content' ':' content=STRING;
	public MessageElements getMessageAccess() {
		return pMessage;
	}
	
	public ParserRule getMessageRule() {
		return getMessageAccess().getRule();
	}
	
	//QName:
	//	'qname' ':' name=ID;
	public QNameElements getQNameAccess() {
		return pQName;
	}
	
	public ParserRule getQNameRule() {
		return getQNameAccess().getRule();
	}
	
	//AreaName:
	//	'area' ':' name=ID;
	public AreaNameElements getAreaNameAccess() {
		return pAreaName;
	}
	
	public ParserRule getAreaNameRule() {
		return getAreaNameAccess().getRule();
	}
	
	//Port:
	//	'port' ':' name=ID 'portnumber' ':' portnumber=INT;
	public PortElements getPortAccess() {
		return pPort;
	}
	
	public ParserRule getPortRule() {
		return getPortAccess().getRule();
	}
	
	//interfaceType:
	//	name=('TCP' | 'IPC');
	public InterfaceTypeElements getInterfaceTypeAccess() {
		return pInterfaceType;
	}
	
	public ParserRule getInterfaceTypeRule() {
		return getInterfaceTypeAccess().getRule();
	}
	
	///*=====================================================================================================
	// * Expressions
	// =====================================================================================================*/ Expression:
	//	Assign;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//Assign Expression:
	//	OrExpression ({Assign.left=current} '=' right=OrExpression)*;
	public AssignElements getAssignAccess() {
		return pAssign;
	}
	
	public ParserRule getAssignRule() {
		return getAssignAccess().getRule();
	}
	
	//OrExpression Expression:
	//	AndExpression ({OrExpression.left=current} 'or' right=AndExpression)*;
	public OrExpressionElements getOrExpressionAccess() {
		return pOrExpression;
	}
	
	public ParserRule getOrExpressionRule() {
		return getOrExpressionAccess().getRule();
	}
	
	//AndExpression Expression:
	//	ComparisonOperators ({AndExpression.left=current} 'and' right=ComparisonOperators)*;
	public AndExpressionElements getAndExpressionAccess() {
		return pAndExpression;
	}
	
	public ParserRule getAndExpressionRule() {
		return getAndExpressionAccess().getRule();
	}
	
	//ComparisonOperators Expression:
	//	Addition (=>
	//	({GT.left=current} ">" // Greater Than
	//	| {LT.left=current} "<" // Lower Than
	//	| {GE.left=current} ">=" // Greater or Equal
	//	| {LE.left=current} "<=" // Lower or Equal
	//	| {EQ.left=current} "==" // Equal
	//	| {NE.left=current} "!=" // Not Equal
	//) rest=Addition)*;
	public ComparisonOperatorsElements getComparisonOperatorsAccess() {
		return pComparisonOperators;
	}
	
	public ParserRule getComparisonOperatorsRule() {
		return getComparisonOperatorsAccess().getRule();
	}
	
	//Addition Expression:
	//	Multiplication (=> ({Addition.left=current} '+'
	//	| {Minus.left=current} '-') right=Multiplication)*;
	public AdditionElements getAdditionAccess() {
		return pAddition;
	}
	
	public ParserRule getAdditionRule() {
		return getAdditionAccess().getRule();
	}
	
	//Multiplication Expression:
	//	Unary (=> ({Multiplication.left=current} '*'
	//	| {Divide.left=current} '/'
	//	| {Modulo.left=current} '%') right=Unary)*;
	public MultiplicationElements getMultiplicationAccess() {
		return pMultiplication;
	}
	
	public ParserRule getMultiplicationRule() {
		return getMultiplicationAccess().getRule();
	}
	
	//Unary Expression:
	//	UnaryExpressionNotPlusMinus
	//	| {UnaryExpression} '-' exp=Unary;
	public UnaryElements getUnaryAccess() {
		return pUnary;
	}
	
	public ParserRule getUnaryRule() {
		return getUnaryAccess().getRule();
	}
	
	//UnaryExpressionNotPlusMinus Expression:
	//	NotBooleanExpression
	//	| PrimaryExpression;
	public UnaryExpressionNotPlusMinusElements getUnaryExpressionNotPlusMinusAccess() {
		return pUnaryExpressionNotPlusMinus;
	}
	
	public ParserRule getUnaryExpressionNotPlusMinusRule() {
		return getUnaryExpressionNotPlusMinusAccess().getRule();
	}
	
	//NotBooleanExpression:
	//	'!' exp=Unary;
	public NotBooleanExpressionElements getNotBooleanExpressionAccess() {
		return pNotBooleanExpression;
	}
	
	public ParserRule getNotBooleanExpressionRule() {
		return getNotBooleanExpressionAccess().getRule();
	}
	
	//PrimaryExpression Expression:
	//	LiteralOrIdentifier
	//	| '(' Expression ')';
	public PrimaryExpressionElements getPrimaryExpressionAccess() {
		return pPrimaryExpression;
	}
	
	public ParserRule getPrimaryExpressionRule() {
		return getPrimaryExpressionAccess().getRule();
	}
	
	//LiteralOrIdentifier Expression:
	//	Literal
	//	| Identifier;
	public LiteralOrIdentifierElements getLiteralOrIdentifierAccess() {
		return pLiteralOrIdentifier;
	}
	
	public ParserRule getLiteralOrIdentifierRule() {
		return getLiteralOrIdentifierAccess().getRule();
	}
	
	//Literal:
	//	IntLiteral
	//	| BoolLiteral
	//	| StLiteral
	//	| RealLiteral;
	public LiteralElements getLiteralAccess() {
		return pLiteral;
	}
	
	public ParserRule getLiteralRule() {
		return getLiteralAccess().getRule();
	}
	
	//IntLiteral:
	//	{IntLiteral} int=INT;
	public IntLiteralElements getIntLiteralAccess() {
		return pIntLiteral;
	}
	
	public ParserRule getIntLiteralRule() {
		return getIntLiteralAccess().getRule();
	}
	
	//BoolLiteral:
	//	{BoolLiteral} bool=BOOLEAN;
	public BoolLiteralElements getBoolLiteralAccess() {
		return pBoolLiteral;
	}
	
	public ParserRule getBoolLiteralRule() {
		return getBoolLiteralAccess().getRule();
	}
	
	//terminal BOOLEAN returns ecore::EBoolean:
	//	'true'
	//	| 'false';
	public TerminalRule getBOOLEANRule() {
		return tBOOLEAN;
	}
	
	//StLiteral:
	//	{StLiteral} string=STRING;
	public StLiteralElements getStLiteralAccess() {
		return pStLiteral;
	}
	
	public ParserRule getStLiteralRule() {
		return getStLiteralAccess().getRule();
	}
	
	//Identifier:
	//	Refrence=DotExpression;
	public IdentifierElements getIdentifierAccess() {
		return pIdentifier;
	}
	
	public ParserRule getIdentifierRule() {
		return getIdentifierAccess().getRule();
	}
	
	//QualifiedName:
	//	ID ('.' ID)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return pQualifiedName;
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
