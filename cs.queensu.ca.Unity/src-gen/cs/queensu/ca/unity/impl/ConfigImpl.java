/**
 * generated by Xtext 2.12.0
 */
package cs.queensu.ca.unity.impl;

import cs.queensu.ca.unity.Attribute;
import cs.queensu.ca.unity.Config;
import cs.queensu.ca.unity.Expression;
import cs.queensu.ca.unity.UnityPackage;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Config</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link cs.queensu.ca.unity.impl.ConfigImpl#getPropertyName <em>Property Name</em>}</li>
 *   <li>{@link cs.queensu.ca.unity.impl.ConfigImpl#getPropertyValue <em>Property Value</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ConfigImpl extends MinimalEObjectImpl.Container implements Config
{
  /**
   * The cached value of the '{@link #getPropertyName() <em>Property Name</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPropertyName()
   * @generated
   * @ordered
   */
  protected Attribute propertyName;

  /**
   * The cached value of the '{@link #getPropertyValue() <em>Property Value</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPropertyValue()
   * @generated
   * @ordered
   */
  protected Expression propertyValue;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ConfigImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return UnityPackage.Literals.CONFIG;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Attribute getPropertyName()
  {
    if (propertyName != null && propertyName.eIsProxy())
    {
      InternalEObject oldPropertyName = (InternalEObject)propertyName;
      propertyName = (Attribute)eResolveProxy(oldPropertyName);
      if (propertyName != oldPropertyName)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, UnityPackage.CONFIG__PROPERTY_NAME, oldPropertyName, propertyName));
      }
    }
    return propertyName;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Attribute basicGetPropertyName()
  {
    return propertyName;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setPropertyName(Attribute newPropertyName)
  {
    Attribute oldPropertyName = propertyName;
    propertyName = newPropertyName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, UnityPackage.CONFIG__PROPERTY_NAME, oldPropertyName, propertyName));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Expression getPropertyValue()
  {
    return propertyValue;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetPropertyValue(Expression newPropertyValue, NotificationChain msgs)
  {
    Expression oldPropertyValue = propertyValue;
    propertyValue = newPropertyValue;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, UnityPackage.CONFIG__PROPERTY_VALUE, oldPropertyValue, newPropertyValue);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setPropertyValue(Expression newPropertyValue)
  {
    if (newPropertyValue != propertyValue)
    {
      NotificationChain msgs = null;
      if (propertyValue != null)
        msgs = ((InternalEObject)propertyValue).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - UnityPackage.CONFIG__PROPERTY_VALUE, null, msgs);
      if (newPropertyValue != null)
        msgs = ((InternalEObject)newPropertyValue).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - UnityPackage.CONFIG__PROPERTY_VALUE, null, msgs);
      msgs = basicSetPropertyValue(newPropertyValue, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, UnityPackage.CONFIG__PROPERTY_VALUE, newPropertyValue, newPropertyValue));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case UnityPackage.CONFIG__PROPERTY_VALUE:
        return basicSetPropertyValue(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case UnityPackage.CONFIG__PROPERTY_NAME:
        if (resolve) return getPropertyName();
        return basicGetPropertyName();
      case UnityPackage.CONFIG__PROPERTY_VALUE:
        return getPropertyValue();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case UnityPackage.CONFIG__PROPERTY_NAME:
        setPropertyName((Attribute)newValue);
        return;
      case UnityPackage.CONFIG__PROPERTY_VALUE:
        setPropertyValue((Expression)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case UnityPackage.CONFIG__PROPERTY_NAME:
        setPropertyName((Attribute)null);
        return;
      case UnityPackage.CONFIG__PROPERTY_VALUE:
        setPropertyValue((Expression)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case UnityPackage.CONFIG__PROPERTY_NAME:
        return propertyName != null;
      case UnityPackage.CONFIG__PROPERTY_VALUE:
        return propertyValue != null;
    }
    return super.eIsSet(featureID);
  }

} //ConfigImpl
