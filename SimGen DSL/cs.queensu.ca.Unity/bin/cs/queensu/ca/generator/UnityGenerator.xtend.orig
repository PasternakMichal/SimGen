/*
 * generated by Xtext 2.11.0
 */


package cs.queensu.ca.generator

import com.google.inject.Injector
import cs.queensu.ca.UnityStandaloneSetup
import cs.queensu.ca.unity.BoolLiteral
import cs.queensu.ca.unity.Channel
import cs.queensu.ca.unity.ENV
import cs.queensu.ca.unity.Expression
import cs.queensu.ca.unity.Instance
import cs.queensu.ca.unity.IntLiteral
import cs.queensu.ca.unity.Literal
import cs.queensu.ca.unity.StLiteral
import cs.queensu.ca.unity.UnityObject
import java.io.IOException
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import org.eclipse.xtext.resource.XtextResourceSet
<<<<<<< HEAD
import cs.queensu.ca.unity.UnaryExpression
import cs.queensu.ca.unity.impl.AssignImpl
import cs.queensu.ca.unity.Identifier
import cs.queensu.ca.unity.impl.IdentifierImpl
import cs.queensu.ca.unity.impl.AdditionImpl
import cs.queensu.ca.unity.impl.MultiplicationImpl
import cs.queensu.ca.unity.Ref
import cs.queensu.ca.unity.impl.PropertyImpl
import cs.queensu.ca.unity.impl.RefImpl
import cs.queensu.ca.unity.impl.SingleRefImpl
import cs.queensu.ca.unity.impl.ModuloImpl
import cs.queensu.ca.unity.impl.DivideImpl
import cs.queensu.ca.unity.impl.MinusImpl
import cs.queensu.ca.unity.MetaObject
=======
import cs.queensu.ca.unity.MetaObject
import cs.queensu.ca.unity.impl.PropertyImpl
import cs.queensu.ca.unity.impl.IdentifierImpl
import cs.queensu.ca.unity.impl.MultiplicationImpl
import cs.queensu.ca.unity.impl.AdditionImpl
import cs.queensu.ca.unity.impl.AssignImpl
import cs.queensu.ca.unity.impl.ModuloImpl
import cs.queensu.ca.unity.impl.DivideImpl
import cs.queensu.ca.unity.impl.MinusImpl
import cs.queensu.ca.unity.UnaryExpression
import cs.queensu.ca.unity.impl.SingleRefImpl
import cs.queensu.ca.unity.Ref
>>>>>>> b4edf2209171050faf148c242039c48bd45ae7b6
import cs.queensu.ca.unity.Attribute

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class UnityGenerator extends AbstractGenerator {

	//UMLRTLibraryGenerator umlrtUtil;
	
	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		//----- Unity File Generation -----
		println("Saving Ecore model is started");
		// generate unity code
		generateUnityCode(resource,fsa,context);
		// generate model xmi
		generateXMIFile(resource,fsa); 
		// generate UMLRT model library
		var UMLRTLibraryGenerator umlrtUtil=new UMLRTLibraryGenerator(resource,fsa,context) ;
		umlrtUtil.generateModelLibrary();
	}
	
	def UMLRTLibraryGenerator(Resource resource, IFileSystemAccess2 access2, IGeneratorContext context) {
		throw new UnsupportedOperationException("TODO: auto-generated method stub")
	}
	
	   		// --- utilities ---
	// generate xmi file 
	def generateXMIFile(Resource resource, IFileSystemAccess2 fsa) {
   		// ----- XMI generation -----
		var Injector injector = new UnityStandaloneSetup().createInjectorAndDoEMFRegistration();
		var XtextResourceSet resourceSet =injector.getInstance(XtextResourceSet);
		var String xtextFilename=resource.URI.lastSegment;
		var String EcoreFileName=xtextFilename.replace(xtextFilename.split("\\.").get(1),"xmi")
		var Resource xmiResource=resourceSet.createResource(fsa.getURI(EcoreFileName));

		xmiResource.getContents().add(resource.getContents().get(0));

   			try {
      		 	xmiResource.save(null);
    		} 
    		catch (IOException e) {
       	 		e.printStackTrace();
   			}		
	}
		
	// main unity code generation function
	def generateUnityCode(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		for (m: resource.allContents.toIterable.filter(MetaObject)){
			// ----- Generate all the metaobject classes for reference in unity
			if(m.kind == 'rover'){
				fsa.generateFile(("Simulator/"+m.name+"MetaObject.cs"),roverClass(m));
			}
			else if (m.kind == 'generic'){
				fsa.generateFile(("Simulator/"+m.name+"MetaObject.cs"),genericClass(m));
			}
			else if (m.kind == 'car'){
				fsa.generateFile(("Simulator/"+m.name+"MetaObject.cs"),carClass(m));
			}
			else{
				fsa.generateFile(("Simulator/"+m.name+"MetaObject.cs"),othersClass(m));
			}
		}
		for (a: resource.allContents.toIterable.filter(ENV)){
			//starter populates the scene with all relevant objects for the simulation
			fsa.generateFile("Simulator/starter.cs",starter(a));
			// ------- Create Unity scripts for each metaobject -------
   			for (b: a.instances){
   				fsa.generateFile(("Simulator/"+b.name+"Script.cs"),objectScript(b));
   				
   			}
   			/* 	if (b.instanceType.type.kind == 'generic'){
   					fsa.generateFile(("Simulator/"+b.name+"Script.cs"),generic(b));
   				}
   				if (b.instanceType.type.kind == 'others'){
   					fsa.generateFile(("Simulator/"+b.name+"Script.cs"),landscape(b));
   				}
   				else if (b.instanceType.type.kind == 'rover'){
   					fsa.generateFile(("Simulator/"+b.name+"Script.cs"),rover(b));
   				}
   				else if (b.instanceType.type.kind == 'car'){
   					fsa.generateFile(("Simulator/"+b.name+"Script.cs"),car(b));
   				}
   				else
   					println("unknown MetaObject");
   			}
   			 */
   			
   			for (c: a.channels){
   				fsa.generateFile(("Simulator/"+"ChannelController"+c.name+".cs"),channelcontroller(c));
   				
   				//fsa.generateFile((c.name+"/CTstarter.cs"),clientStarter(c));
   			}
   			
   		}		
	} 		
	// can only return a certain type that must be consistent ie. bool or int
	
	
	
	def int intExtractor(Expression e){
		switch (e){
	   		Literal:{
	   				var Literal litvalue=e as Literal;
	   				if (litvalue instanceof IntLiteral){
	   				print((litvalue as IntLiteral).getInt()) ;
	   				var int i=(litvalue as IntLiteral).getInt().intValue;
	   				return i;
	   				}			 		
	   			}
	   		UnaryExpression:{ 
	   			var Expression myExp = e.exp;
	   			var answer = intExtractor(myExp);
	   			return -answer
	   			}
	   		
	   		}
	   		
	   		return 0;
	}
	
		def String stringify(Expression e,String s){
			 switch(e){
			 	PropertyImpl:{return translateToUnity(e.name)}
			 	IdentifierImpl:{s+translateToUnity(refExtract(e.refrence))}
			 	Literal:{return stringExtractor(e)}
			 	MultiplicationImpl:{return (stringify(e.left,s)+" * "+stringify(e.right,s))}
			 	AdditionImpl: {return stringify(e.left,s)+" + "+stringify(e.right,s)}
			 	AssignImpl:{return (stringify(e.left,s)+" = "+stringify(e.right,s))}
			 	ModuloImpl:{return (stringify(e.left,s) +" % "+stringify(e.right,s))}
			 	DivideImpl:{return (stringify(e.left,s) +" / "+stringify(e.right,s))}
			 	MinusImpl:{return (stringify(e.left,s) +" - "+stringify(e.right,s))}
			 	Expression:{return "error help me"}
			 }
			
		}
		
		def String translateToUnity(String s){
			
				if(s == "LFmotor") return "rm.ColliderL1.motorTorque"
				else if (s == "LMmotor") return "rm.ColliderL2.motorTorque"
				else if (s == "LBmotor") return "rm.ColliderL3.motorTorque"
				else if (s == "RFmotor") return "rm.ColliderR1.motorTorque"
				else if (s == "RMmotor") return "rm.ColliderR2.motorTorque"
				else if (s == "RBmotor") return "rm.ColliderR3.motorTorque"
				
				else if (s == "LFbrake") return "rm.ColliderL1.brakeTorque"
				else if (s == "LMbrake") return "rm.ColliderL2.brakeTorque"
				else if (s == "LBbrake") return "rm.ColliderL3.brakeTorque"
				else if (s == "RFbrake") return "rm.ColliderR1.brakeTorque"
				else if (s == "RMbrake") return "rm.ColliderR2.brakeTorque"
				else if (s == "RBbrake") return "rm.ColliderR3.brakeTorque"
				
				else if (s == "velX") return "rb.velocity.x"
				else if (s == "velY") return "rb.velocity.y"
				else if (s == "velZ") return "rb.velocity.z"
				
				else if (s == "posX") return "t.localPosition.x"
				else if (s == "posY") return "t.localPosition.y"
				else if (s == "posZ") return "t.localPosition.z"
				
				else if (s == "sizeX") return "t.localScale.x"
				else if (s == "sizeY") return "t.localScale.y"
				else if (s == "sizeZ") return "t.localScale.z"
			
				else if (s == "angVelX") return "rb.angularVelocity.x"
				else if (s == "angVelY") return "rb.angularVelocity.y"
				else if (s == "angVelZ") return "rb.angularVelocity.z"
				
				else return s
		}
		
		def String refExtract(Ref a){
			switch(a){
				SingleRefImpl:{
					a.singleRef.name
				}
			}
		}
		

		
	
	def stringExtractor(Expression e){   
	   	switch (e){
	   				Literal: {
	   						var Literal litvalue=e as Literal;
	   						if (litvalue instanceof StLiteral){
	   							 print((litvalue as StLiteral).getString()) ;
	   							 var String i=(litvalue as StLiteral).getString();
	   							 return i;
	   							} 
	   							if (litvalue instanceof IntLiteral){
	   								return (intExtractor(litvalue)).toString
	   							}
	   							if (litvalue instanceof BoolLiteral){
	   								return (boolExtractor(litvalue)).toString
	   							}
	   						}
	   			}
	 }
	   		
	   		
	   		def boolExtractor(Expression e){
	   			
	   			switch (e)
	   			{
	   				Literal: {
	   					var Literal litvalue=e as Literal;
	   					if (litvalue instanceof BoolLiteral){
	   							print((litvalue as BoolLiteral).isBool());
	   							var boolean b = (litvalue as BoolLiteral).isBool().booleanValue;
	   							return b;
	   						}
	   				}
	   			}
	   			
	   		}
	   	
	   		def getIntValue(UnityObject a,String b){
	   			for (q: a.configurations){
	   				for (w: q.configs){
	   					if (w.propertyName.name == b)
	   						return (intExtractor(w.propertyValue));
	   				}
	   			}
	   			return 0;
	   		}
	 
	   		
	   		def getStringValue(UnityObject a,String b){
	   			for (q: a.configurations){
	   				for (w: q.configs){
	   					if (w.propertyName.name == b)
	   						return (stringExtractor(w.propertyValue));
	   				}
	   			}
	   			return "";
	   		}
	   		
	   		def getBoolValue(UnityObject a,String b){
	   			for (q: a.configurations){
	   				for (w: q.configs){
	   					if (w.propertyName.name == b)
	   						return ((boolExtractor(w.propertyValue)));
	   				}
	   			}
	   			return false;
	   		}
	   	def String getVarType(Attribute p) {
   			if (p.propertyType.name == 'bool'){
   				return 'bool'
   			}
   			else if (p.propertyType.name ==  'int'){
   				return 'int'
   			}
   			else if (p.propertyType.name == 'string'){
   				return 'string'
   			}
   			else {
   				return 'float'
   			}
   		}
	   		
	   		def sizeAndScale(UnityObject e,String a)'''
	   		Transform t = GetComponentInChildren<Transform>();
	   		«IF a=="rover" || a=="generic" || a =="car"»
	   		t.localScale = new Vector3 («e.getIntValue("size")»f,«e.getIntValue("size")»f,«e.getIntValue("size")»f);
	   		«ELSE»
	   		t.localScale = new Vector3 («e.getIntValue("sizex")»f,«e.getIntValue("sizey")»f,«e.getIntValue("sizez")»f);
	   		«ENDIF»
	   		t.localPosition = new Vector3(«e.getIntValue("posx")»f,«e.getIntValue("posy")»f,«e.getIntValue("posz")»f);
	   		'''
   		// --- script definitions ---
   		def landscape(Instance e) '''
   		using System.Collections;
   		using System.Collections.Generic;
   		using UnityEngine;
   		
   		public class «e.name»Script : MonoBehaviour {
   			public sateliteCameraScript cam;
   			void Start () {
   				«sizeAndScale(e.instanceType,e.instanceType.type.kind)»
   				
   			}
   			
   			void Update () {
   				// on going monitoring or changing things based on object
   			}
   			void focus(){
   				cam.observedObject = gameObject;
   			}
   		}
   		'''
   		def generic(Instance e) '''
   		using System.Collections;
   		using System.Collections.Generic;
   		using UnityEngine;
   		public class «e.name»Script : MonoBehaviour {
   			public sateliteCameraScript cam;
   			void Start () {
   				«sizeAndScale(e.instanceType,e.instanceType.type.kind)»
   				Rigidbody rb = gameObject.GetComponent<Rigidbody> ();
   				rb.mass = «getIntValue(e.instanceType,"mass")»;
   				
   				// load all meshes in model and find the specified mesh
   				MeshFilter myMeshFilter = gameObject.GetComponent<MeshFilter> ();
   				GameObject loadedModel = Resources.Load("«getStringValue(e.instanceType,"model")»") as GameObject; 
   				// first check object, if not found then check all children.
   				if (loadedModel.GetComponent<MeshFilter> () != null && loadedModel.GetComponent<MeshFilter> ().sharedMesh.name ==("«getStringValue(e.instanceType,"mesh")»")) {
   					myMeshFilter.mesh = loadedModel.GetComponent<MeshFilter> ().sharedMesh;
   				} else {
   					MeshFilter[] loadedMeshFilters = loadedModel.GetComponentsInChildren<MeshFilter> ();
   					foreach (MeshFilter mf in loadedMeshFilters) { 
   						if (mf.sharedMesh.name == "«getStringValue(e.instanceType,"mesh")»") {
   							myMeshFilter.mesh = mf.sharedMesh; 
   							break;
   						}
   					}
   				}
   				// Set the renderer to specified image 
   				Renderer myRenderer = gameObject.GetComponent<Renderer>();
   				myRenderer.material = new Material(Shader.Find("Diffuse"));
   				myRenderer.material.mainTexture = Resources.Load("«getStringValue(e.instanceType,"texture")»") as Texture;
   				// Set Collider
   				MeshCollider myMeshCollider = gameObject.GetComponent<MeshCollider> ();
   				myMeshCollider.sharedMesh = myMeshFilter.mesh;
   				
   			}
   			
   			void Update () {
   				// on going monitoring or changing things based on object
   			}
   			void focus(){
   				cam.observedObject = gameObject;
   			}
   		}   		
   		'''
   		// --- starter needs all game object prefabs to be declared and attached
   		def starter(ENV e)'''
   		using System.Collections;
   		using System.Collections.Generic;
   		using UnityEngine;
   		   		
   		public class starter : MonoBehaviour {
   		// ---- These must be assigned as prefabs in Unity and as "metaobjects" in the DSL
   			public sateliteCameraScript Camera;
   			public GameObject Generic;
   			public GameObject Plane;
   			public GameObject Rover;
   			public GameObject Car;
   			public GameObject Gem;
   			
   				«FOR k:e.instances»
   			   		   		GameObject «k.name»Object;
   			   		   	«ENDFOR»
   		//-----
   			void Start () {
   			Application.runInBackground = true;
   		//-- adding the necessary instances
   		   	«FOR k:e.instances»
   		   		«k.name»Object = Instantiate («k.instanceType.type.name»,transform);
   		   		«k.name»Object.AddComponent<«k.name»Script>();
   		   	«ENDFOR»
   		//adding the necessary channel information scripts	
   		   	«FOR k:e.channels»
   		   	gameObject.AddComponent<ChannelController«k.name»>();
   		   	«ENDFOR»
   			}
   			
   			
   				void Update(){//«var i = 0»
   				«FOR k:e.instances»
   				
   					if (Input.GetKeyDown(KeyCode.Alpha«i=i+1»)){
   						Camera.observedObject = «k.name»Object;
   					}
   					«ENDFOR»
   					if (Input.GetKeyDown(KeyCode.Z)){
   						Camera.follow = true;
   					}
   					if (Input.GetKeyDown(KeyCode.X)){
   						Camera.follow = false;
   					}
   					if (Input.GetKeyDown(KeyCode.LeftArrow)){
   								Camera.transform.Rotate (0, -10, 0);
   							}
   							if (Input.GetKeyDown(KeyCode.RightArrow)){
   								Camera.transform.Rotate (0, 10, 0);
   							}
   				}
   		}
   		'''
   		
   		def channelcontroller(Channel c)'''
   		using System.Collections;
   		using System.Collections.Generic;
   		using UnityEngine;
   		
   		public class ChannelController«c.name» : MonoBehaviour {
   			
   			public Network externalComm;
   			public string myName = "«c.name»";
   		
   			void Start () {
   				externalComm = new Network(«c.port.portnumber»,myName,20); // port, net ID, Container size
   				externalComm.StartNetwork();
   			}
   		
   			// Update is called once per frame
   			void Update () {
   				if (externalComm.isContainerEmpty () == false) {
   					route(externalComm.getMessage());
   				}
   		
   			}
   				public void route(string S){
   					if (S != null || S != "") {
   						string name = S.Substring (0, S.IndexOf (','));
   						S = cut (S);
   						// send the message on to the designated recipient inout
   		«FOR q: c.boundInstances»
   			if (name == "«q.name»") {
   				«q.name»Script «q.name» = GetComponentInChildren<«q.name»Script> ();
   				string reply = «q.name».command (S);
   				// if inout, then do this if in only don't 
   				if (reply!= "" || reply != null)
   					externalComm.SendMessage("«q.name»,"+reply+";");
   				}
   		«ENDFOR»
   			}
   		}
   		
   			public string cut(string message){
   				return message.Substring(message.IndexOf(',')+1);
   			}
   		}
   		//message example "buddy,1,LS,RS,LB,RB"
   		'''
   		
   		def car(Instance e)'''
   		using System.Collections;
   		using System.Collections.Generic;
   		using UnityEngine;
   		   		
   		   		public class «e.name»Script : MonoBehaviour {
   		   			void Start () {
   		   				«sizeAndScale(e.instanceType,e.instanceType.type.kind)»
   		   				carMover interface1 = GetComponent<carMover>();
   		   				interface1.ConnectCar(«getIntValue(e.instanceType,"brake")»f,«getIntValue(e.instanceType,"power")»f,"«e.name»");
   		   				«includeNetwork(e,getBoolValue(e.instanceType,"network"),20)»
   		   			}
   		   			
   		   			void Update () {
   		   				if (comms.isContainerEmpty() ==false){
   		   					translate(comms.getMessage());
   		   					}
   		   			}
   		   			
   		   			void translate(string message){
   		   				string reply = null;
   		   				int num = (num) decode(message);
   		   				message = cut(message);
   		   				
   		   				switch(num){
   		   					case 1: 
   		   					comms.EnginePower(decode(message));
   		   					message = cut(message);
   		   					comms.SteerInput(decode(message));
   		   					message = cut(message);
   		   					comms.BrakePower(decode(message));
   		   					case 2:
   		   					reply = comms.CarInfo();
   		   					}
   		   					if(reply!= null)
   		   						comms.SendMessage(reply);
   		   				}
   		   				
   		   			public float decode(string message){
   		   				if (message !="" || message!= null){
   		   			   		return float.Parse( message.Substring(0,message.IndexOf(',')));
   		   			   	}
   		   			   	else
   		   			   	{
   		   			   		Debug.Log("error in the decode function, decoding empty string");
   		   			   		return 0;
   		   			   	}
   		   			}
   		   			public string cut(string message){
   		   			   	return message.Substring(message.IndexOf(','));
   		   			}
   		   		}
   		// 1 = set speed,brake;
   		//2 = get speed,brake, position;
   		'''
   		
   		def rover(Instance e) '''
   		using System.Collections;
   		using System.Collections.Generic;
   		using UnityEngine;
   		
   		public class «e.name»Script : «e.instanceType.type.name»MetaObject {
   		   	public string channelID;
   		   	public sateliteCameraScript cam;
   			void Start () {
   		   		«sizeAndScale(e.instanceType,e.instanceType.type.kind)»
   		   		
   		   		interface1.ConnectRover(«getIntValue(e.instanceType,"brake")»f,«getIntValue(e.instanceType,"power")»f,"«e.name»");
   		   	}
   		   			
   		   	void Update () {}
   		   			
   		   		
   			void focus(){
   				cam.observedObject = gameObject;
   			}
   		
   		'''
   		
   		def objectScript(Instance e)'''
   		using System.Collections;
   		using System.Collections.Generic;
   		using UnityEngine;
   		   		
   		public class «e.name»Script : «e.instanceType.type.name»MetaObject {
   		   			
   		   	public string channelID;
   		   	public sateliteCameraScript cam;
   		   	«FOR a:e.instanceType.newActions»
   		   	public void «a.name»(){
   		   		«FOR v:a.expressions»
   		   		«stringify(v,'')»;
   		   		«ENDFOR»
   		   	}
   		   		«ENDFOR»
   		   	void focus(){
   		   		cam.observedObject = gameObject;
   		   	}
   		}
   		
   		
   		'''
   		
   		def includeNetwork(Instance e, boolean nets,int size ) '''
   		«IF nets ==true»
   		comms = new Network(«getIntValue(e.instanceType,"Port")»,«getIntValue(e.instanceType,"NetId")»,«size»);
   		Debug.Log("comms initiated on «getIntValue(e.instanceType,"Port")» for «e.name»");
   		«ELSE»
   		Debug.Log("«e.name» has no network capability");
   		«ENDIF»
   		'''
   		
   		def clientStarter(Channel c) '''
   		using System.Collections;
   		using System.Collections.Generic;
   		using UnityEngine.UI;
   		using UnityEngine;
   		   		
   		public class CTstarter : MonoBehaviour {
   			public Controller comm;
   			public utilities util;
   			public string msgPayload;
   			public Text port;
   			public Text placeholderPort;
   			public GameObject RoverControl;
   			public GameObject CarControl;
   			public GameObject GenericControl;
   			«FOR a:c.boundInstances»
   			Text «a.name»statesenttext;
   			«ENDFOR»
   			«FOR a:c.boundInstances»
   			float «a.name»lp;
   			float «a.name»rp;
   			float «a.name»lb;
   			float «a.name»rb;
   			«ENDFOR»
   			
   			void Start(){

   				port.text = "«c.port.portnumber»";
   				placeholderPort.text = "«c.port.portnumber»";
   				«var xAdd = 10»«var yAdd = -200»//«var i=0»
   				«FOR k:c.boundInstances»
   					GameObject «k.name»Object = Instantiate («k.instanceType.type.name»Control,transform);
   					(«k.name»Object.GetComponent<RectTransform>()).anchoredPosition3D = new Vector3 («xAdd+(((i/2)%2)*350)»,«yAdd+((i%2)*-120)»,0);// «i=i+1»
   					(«k.name»Object.transform.Find("nameText").gameObject).GetComponent<Text>().text = "«k.name»";
   					«k.name»statesenttext = («k.name»Object.transform.Find("stateSentText").gameObject).GetComponent<Text>();
   				 «FOR a:k.instanceType.type.actions»
   			 	 	Button «k.name»«a.name»But = («k.name»Object.transform.Find ("«a.name»But").gameObject).GetComponent<Button>();
   				 	«k.name»«a.name»But.onClick.AddListener(«k.name»«a.name»);
   				 «ENDFOR»
   				«ENDFOR»
   		«FOR a:c.boundInstances»
   		«a.name»statesenttext.text = "1,0,0,0,0;";
   		«ENDFOR»
   				}
   				// Generate button actions
   				
   				public void inform(string message){
   					«FOR a:c.boundInstances»
   					if (message.StartsWith("«a.name»")==true){
   						«a.name»statesenttext.text = util.cut(message);
   					}
   					«ENDFOR»
   				}
   				
   				«FOR q: c.boundInstances»
   				public void «q.name»Passer(string message){
   					if (message.StartsWith ("1") == true) {
   						comm.lastStatemsg = message;
   					}
   					comm.send("«q.name»,"+message);
   					
   				}
   				«IF q.instanceType.type.kind == "rover"»

   					«FOR a: q.instanceType.type.actions»
   						public void «q.name»«a.name»(){
   							if(comm.connectStatus.text == "Connected"){
   							«FOR v:a.expressions»
   							«stringify(v,q.name)»;
   							«ENDFOR»
   							string msg = "1,"+«q.name»lp+","+«q.name»rp +","+ «q.name»lb +","+ «q.name»rb+";";
   							«q.name»statesenttext.text = "sent: "+msg;
   							«q.name»Passer(msg); // msg is "x,0,0,0,0;"
   							
   							
   							}
   						}
   					«ENDFOR»   				
   				«ENDIF»
   				
   				«IF q.instanceType.type.kind == "generic"»
   					«FOR a: q.instanceType.type.actions»
   						public void «q.name»«a.name»(){
   							
   							}
   					«ENDFOR»
   				«ENDIF»
   				«IF q.instanceType.type == "Car"»
   				   				
   				«ENDIF»
   				
   				«ENDFOR»«»
   		}
   		
   		
   		'''		
   		

   		def roverClass (MetaObject m)'''
   		using UnityEngine;
   		using System.Collections;
   		
   		public class «m.name»MetaObject : MonoBehaviour {
   		
   		public roverMover rm;
   		public Rigidbody rb;
   		public Transform t;
   		
   		
   		void requiredStart(){
   				rm = GetComponent<roverMover> ();
   				rb = GetComponent<Rigidbody> ();
   				t = GetComponentInChildren<Transform>();
   				t.localScale = new Vector3 (size,size,size);
   				t.localPosition = new Vector3(5f,1f,5f);
   				rb.velocity = new Vector3 (velX,velY,velZ);
   				rb.angularVelocity = new Vector3 (0f,0f,0f);
   			}
   		
   		void update(){}
   			
   			
   			«var b = false»
   			«FOR a:m.actions»
   			public void «a.name»(){
   				«IF a.name == "Start"»
   				requiredStart(); //«b =true»
   				«ENDIF»
   					«FOR v:a.expressions»
   				   	«stringify(v,'')»;
   				   	«ENDFOR»
   				}
   				
   			«ENDFOR»
   			«IF b== false»
   			void Start(){
   			 	requiredStart();
   			}
   			«ENDIF»
   			
   		}
   		'''
   		def carClass (MetaObject m)'''
   		using UnityEngine;
   		   		using System.Collections;
   		   		   		
   		   		public class «m.name»MetaObject : MonoBehaviour {
   		   		   void start(){}
   		   		   void update(){}
   		   		   
   		   		}
   		'''
 		def genericClass (MetaObject m)'''
   		using UnityEngine;
   		   		using System.Collections;
   		   		   		
   		   		public class «m.name»MetaObject : MonoBehaviour {
   		   		   void start(){}
   		   		   void update(){}
   		   		   
   		   		}
   		'''
   		def othersClass (MetaObject m)'''
   		using UnityEngine;
   		using System.Collections;
   		   		
   		public class «m.name»MetaObject : MonoBehaviour {
   		   void start(){}
   		   void update(){}
   		   
   		}
   		'''
<<<<<<< HEAD
}
=======
   		
   		}
>>>>>>> b4edf2209171050faf148c242039c48bd45ae7b6
