/**
 * generated by Xtext 2.11.0
 */
package cs.queensu.ca.generator;

import com.google.common.base.Objects;
import com.google.common.collect.Iterables;
import com.google.common.io.CharStreams;
import com.google.inject.Injector;
import cs.queensu.ca.UnityStandaloneSetup;
import cs.queensu.ca.unity.Action;
import cs.queensu.ca.unity.Attribute;
import cs.queensu.ca.unity.BoolLiteral;
import cs.queensu.ca.unity.Channel;
import cs.queensu.ca.unity.Config;
import cs.queensu.ca.unity.ConfigAssignment;
import cs.queensu.ca.unity.ENV;
import cs.queensu.ca.unity.Expression;
import cs.queensu.ca.unity.Instance;
import cs.queensu.ca.unity.IntLiteral;
import cs.queensu.ca.unity.Literal;
import cs.queensu.ca.unity.MetaObject;
import cs.queensu.ca.unity.OverrideAction;
import cs.queensu.ca.unity.Param;
import cs.queensu.ca.unity.Payload;
import cs.queensu.ca.unity.Purpose;
import cs.queensu.ca.unity.RealLiteral;
import cs.queensu.ca.unity.Ref;
import cs.queensu.ca.unity.StLiteral;
import cs.queensu.ca.unity.UnaryExpression;
import cs.queensu.ca.unity.UnityObject;
import cs.queensu.ca.unity.VarType;
import cs.queensu.ca.unity.impl.AdditionImpl;
import cs.queensu.ca.unity.impl.AssignImpl;
import cs.queensu.ca.unity.impl.DivideImpl;
import cs.queensu.ca.unity.impl.IdentifierImpl;
import cs.queensu.ca.unity.impl.MinusImpl;
import cs.queensu.ca.unity.impl.ModuloImpl;
import cs.queensu.ca.unity.impl.MultiplicationImpl;
import cs.queensu.ca.unity.impl.PropertyImpl;
import cs.queensu.ca.unity.impl.SingleRefImpl;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.resource.XtextResourceSet;
import org.eclipse.xtext.xbase.lib.Conversions;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.eclipse.xtext.xbase.lib.InputOutput;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class UnityGenerator extends AbstractGenerator {
  private ArrayList<String> lines = new ArrayList<String>();
  
  private HashMap<String, String> keyHash = new HashMap<String, String>();
  
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    InputOutput.<String>println("Checking config file...");
    String _property = System.getProperty("user.dir");
    String _plus = ("Working Directory = " + _property);
    System.out.println(_plus);
    this.readFile("prototypeConfig.txt");
    this.generateUnityCode(resource, fsa, context);
    this.generateXMIFile(resource, fsa);
  }
  
  public void UMLRTLibraryGenerator(final Resource resource, final IFileSystemAccess2 access2, final IGeneratorContext context) {
    throw new UnsupportedOperationException("TODO: auto-generated method stub");
  }
  
  public void generateXMIFile(final Resource resource, final IFileSystemAccess2 fsa) {
    Injector injector = new UnityStandaloneSetup().createInjectorAndDoEMFRegistration();
    XtextResourceSet resourceSet = injector.<XtextResourceSet>getInstance(XtextResourceSet.class);
    String xtextFilename = resource.getURI().lastSegment();
    String EcoreFileName = xtextFilename.replace(xtextFilename.split("\\.")[1], "xmi");
    Resource xmiResource = resourceSet.createResource(fsa.getURI(EcoreFileName));
    xmiResource.getContents().add(resource.getContents().get(0));
    try {
      xmiResource.save(null);
    } catch (final Throwable _t) {
      if (_t instanceof IOException) {
        final IOException e = (IOException)_t;
        e.printStackTrace();
      } else {
        throw Exceptions.sneakyThrow(_t);
      }
    }
  }
  
  public void generateUnityCode(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    Iterable<MetaObject> _filter = Iterables.<MetaObject>filter(IteratorExtensions.<EObject>toIterable(resource.getAllContents()), MetaObject.class);
    for (final MetaObject m : _filter) {
      String _lastSegment = resource.getURI().lastSegment();
      String _plus = ("Simulator/" + _lastSegment);
      String _plus_1 = (_plus + "/");
      String _name = m.getName();
      String _plus_2 = (_plus_1 + _name);
      String _plus_3 = (_plus_2 + "MetaObject.cs");
      fsa.generateFile(_plus_3, this.allClass(m));
    }
    Iterable<ENV> _filter_1 = Iterables.<ENV>filter(IteratorExtensions.<EObject>toIterable(resource.getAllContents()), ENV.class);
    for (final ENV a : _filter_1) {
      {
        String _lastSegment_1 = resource.getURI().lastSegment();
        String _plus_4 = ("Simulator/" + _lastSegment_1);
        String _plus_5 = (_plus_4 + "/");
        String _plus_6 = (_plus_5 + "starter.cs");
        fsa.generateFile(_plus_6, this.starter(a));
        EList<Instance> _instances = a.getInstances();
        for (final Instance b : _instances) {
          String _kind = b.getInstanceType().getType().getKind();
          boolean _equals = Objects.equal(_kind, "generic");
          if (_equals) {
            String _lastSegment_2 = resource.getURI().lastSegment();
            String _plus_7 = ("Simulator/" + _lastSegment_2);
            String _plus_8 = (_plus_7 + "/");
            String _name_1 = b.getName();
            String _plus_9 = (_plus_8 + _name_1);
            String _plus_10 = (_plus_9 + "Script.cs");
            fsa.generateFile(_plus_10, this.generic(b));
          } else {
            String _lastSegment_3 = resource.getURI().lastSegment();
            String _plus_11 = ("Simulator/" + _lastSegment_3);
            String _plus_12 = (_plus_11 + "/");
            String _name_2 = b.getName();
            String _plus_13 = (_plus_12 + _name_2);
            String _plus_14 = (_plus_13 + "Script.cs");
            fsa.generateFile(_plus_14, this.allObject(b));
          }
        }
        EList<Channel> _channels = a.getChannels();
        for (final Channel c : _channels) {
          String _lastSegment_4 = resource.getURI().lastSegment();
          String _plus_15 = ("Simulator/" + _lastSegment_4);
          String _plus_16 = (_plus_15 + "/");
          String _plus_17 = (_plus_16 + "ChannelController");
          String _name_3 = c.getName();
          String _plus_18 = (_plus_17 + _name_3);
          String _plus_19 = (_plus_18 + ".cs");
          fsa.generateFile(_plus_19, this.channelcontroller(c));
        }
        String _lastSegment_5 = resource.getURI().lastSegment();
        String _plus_20 = ("Simulator/" + _lastSegment_5);
        String _plus_21 = (_plus_20 + "/");
        String _plus_22 = (_plus_21 + "README.txt");
        fsa.generateFile(_plus_22, this.readme(a));
      }
    }
  }
  
  public void readFile(final String fileName) {
    try {
      boolean _isEmpty = this.keyHash.isEmpty();
      boolean _equals = (_isEmpty == true);
      if (_equals) {
        final List<String> file = CharStreams.readLines(new FileReader(fileName));
        for (final String a : file) {
          if (((a.contains(":") == false) && (a.contains("=") == true))) {
            int _indexOf = a.indexOf("=");
            int _plus = (_indexOf + 1);
            this.keyHash.put(a.substring(0, a.indexOf("=")), a.substring(_plus));
          } else {
            boolean _contains = a.contains(":");
            boolean _equals_1 = (_contains == true);
            if (_equals_1) {
              this.lines.add(a);
            }
          }
        }
      }
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  public int intExtractor(final Expression e) {
    boolean _matched = false;
    if (e instanceof Literal) {
      _matched=true;
      Literal litvalue = ((Literal) e);
      if ((litvalue instanceof IntLiteral)) {
        InputOutput.<Integer>print(Integer.valueOf(((IntLiteral) litvalue).getInt()));
        int i = Integer.valueOf(((IntLiteral) litvalue).getInt()).intValue();
        return i;
      }
    }
    if (!_matched) {
      if (e instanceof UnaryExpression) {
        _matched=true;
        Expression myExp = ((UnaryExpression)e).getExp();
        int answer = this.intExtractor(myExp);
        return (-answer);
      }
    }
    return 0;
  }
  
  public double realExtractor(final Expression e) {
    boolean _matched = false;
    if (e instanceof Literal) {
      _matched=true;
      Literal litvalue = ((Literal) e);
      if ((litvalue instanceof RealLiteral)) {
        InputOutput.<Double>print(Double.valueOf(((RealLiteral) litvalue).getReal()));
        double i = Double.valueOf(((RealLiteral) litvalue).getReal()).doubleValue();
        return i;
      }
    }
    if (!_matched) {
      if (e instanceof UnaryExpression) {
        _matched=true;
        Expression myExp = ((UnaryExpression)e).getExp();
        double answer = this.realExtractor(myExp);
        return (-answer);
      }
    }
    return 0.0;
  }
  
  public String stringify(final Expression e, final String s, final MetaObject m) {
    String _switchResult = null;
    boolean _matched = false;
    if (e instanceof PropertyImpl) {
      _matched=true;
      return this.translateToUnity(((PropertyImpl)e).getName(), m);
    }
    if (!_matched) {
      if (e instanceof IdentifierImpl) {
        _matched=true;
        String _translateToUnity = this.translateToUnity(this.refExtract(((IdentifierImpl)e).getRefrence()), m);
        _switchResult = (s + _translateToUnity);
      }
    }
    if (!_matched) {
      if (e instanceof Literal) {
        _matched=true;
        return this.stringExtractor(e);
      }
    }
    if (!_matched) {
      if (e instanceof MultiplicationImpl) {
        _matched=true;
        String _stringify = this.stringify(((MultiplicationImpl)e).getLeft(), s, m);
        String _plus = (_stringify + " * ");
        String _stringify_1 = this.stringify(((MultiplicationImpl)e).getRight(), s, m);
        return (_plus + _stringify_1);
      }
    }
    if (!_matched) {
      if (e instanceof AdditionImpl) {
        _matched=true;
        String _stringify = this.stringify(((AdditionImpl)e).getLeft(), s, m);
        String _plus = (_stringify + " + ");
        String _stringify_1 = this.stringify(((AdditionImpl)e).getRight(), s, m);
        return (_plus + _stringify_1);
      }
    }
    if (!_matched) {
      if (e instanceof AssignImpl) {
        _matched=true;
        String _stringify = this.stringify(((AssignImpl)e).getLeft(), s, m);
        String _plus = (_stringify + " = ");
        String _stringify_1 = this.stringify(((AssignImpl)e).getRight(), s, m);
        return (_plus + _stringify_1);
      }
    }
    if (!_matched) {
      if (e instanceof ModuloImpl) {
        _matched=true;
        String _stringify = this.stringify(((ModuloImpl)e).getLeft(), s, m);
        String _plus = (_stringify + " % ");
        String _stringify_1 = this.stringify(((ModuloImpl)e).getRight(), s, m);
        return (_plus + _stringify_1);
      }
    }
    if (!_matched) {
      if (e instanceof DivideImpl) {
        _matched=true;
        String _stringify = this.stringify(((DivideImpl)e).getLeft(), s, m);
        String _plus = (_stringify + " / ");
        String _stringify_1 = this.stringify(((DivideImpl)e).getRight(), s, m);
        return (_plus + _stringify_1);
      }
    }
    if (!_matched) {
      if (e instanceof MinusImpl) {
        _matched=true;
        String _stringify = this.stringify(((MinusImpl)e).getLeft(), s, m);
        String _plus = (_stringify + " - ");
        String _stringify_1 = this.stringify(((MinusImpl)e).getRight(), s, m);
        return (_plus + _stringify_1);
      }
    }
    if (!_matched) {
      if (e instanceof Expression) {
        _matched=true;
        return "error help me";
      }
    }
    return _switchResult;
  }
  
  public String translateToUnity(final String s, final MetaObject m) {
    if ((s != null)) {
      String _name = m.getName();
      String _plus = (_name + ".");
      String _plus_1 = (_plus + s);
      String _get = this.keyHash.get(_plus_1);
      boolean _tripleNotEquals = (_get != null);
      if (_tripleNotEquals) {
        String _name_1 = m.getName();
        String _plus_2 = (_name_1 + ".");
        String _plus_3 = (_plus_2 + s);
        return this.keyHash.get(_plus_3);
      }
    }
    boolean _equals = Objects.equal(s, "posX");
    if (_equals) {
      return "posx";
    } else {
      boolean _equals_1 = Objects.equal(s, "posY");
      if (_equals_1) {
        return "posy";
      } else {
        boolean _equals_2 = Objects.equal(s, "posZ");
        if (_equals_2) {
          return "posz";
        } else {
          boolean _equals_3 = Objects.equal(s, "sizeX");
          if (_equals_3) {
            return "sizex";
          } else {
            boolean _equals_4 = Objects.equal(s, "sizeY");
            if (_equals_4) {
              return "sizey";
            } else {
              boolean _equals_5 = Objects.equal(s, "sizeZ");
              if (_equals_5) {
                return "sizez";
              } else {
                return s;
              }
            }
          }
        }
      }
    }
  }
  
  public String refExtract(final Ref a) {
    String _switchResult = null;
    boolean _matched = false;
    if (a instanceof SingleRefImpl) {
      _matched=true;
      _switchResult = ((SingleRefImpl)a).getSingleRef().getName();
    }
    return _switchResult;
  }
  
  public String stringExtractor(final Expression e) {
    boolean _matched = false;
    if (e instanceof Literal) {
      _matched=true;
      Literal litvalue = ((Literal) e);
      if ((litvalue instanceof StLiteral)) {
        String i = ((StLiteral) litvalue).getString();
        return i;
      }
      if ((litvalue instanceof IntLiteral)) {
        return Integer.valueOf(this.intExtractor(litvalue)).toString();
      }
      if ((litvalue instanceof BoolLiteral)) {
        return Boolean.valueOf(this.boolExtractor(litvalue)).toString();
      }
      if ((litvalue instanceof RealLiteral)) {
        return Double.valueOf(this.realExtractor(litvalue)).toString();
      }
    }
    return null;
  }
  
  public boolean boolExtractor(final Expression e) {
    boolean _matched = false;
    if (e instanceof Literal) {
      _matched=true;
      Literal litvalue = ((Literal) e);
      if ((litvalue instanceof BoolLiteral)) {
        boolean b = Boolean.valueOf(((BoolLiteral) litvalue).isBool()).booleanValue();
        return b;
      }
    }
    return false;
  }
  
  public int getIntValue(final UnityObject a, final String b) {
    EList<ConfigAssignment> _configurations = a.getConfigurations();
    for (final ConfigAssignment q : _configurations) {
      EList<Config> _configs = q.getConfigs();
      for (final Config w : _configs) {
        String _name = w.getPropertyName().getName();
        boolean _equals = Objects.equal(_name, b);
        if (_equals) {
          return this.intExtractor(w.getPropertyValue());
        }
      }
    }
    return 0;
  }
  
  public double getRealValue(final UnityObject a, final String b) {
    EList<ConfigAssignment> _configurations = a.getConfigurations();
    for (final ConfigAssignment q : _configurations) {
      EList<Config> _configs = q.getConfigs();
      for (final Config w : _configs) {
        String _name = w.getPropertyName().getName();
        boolean _equals = Objects.equal(_name, b);
        if (_equals) {
          return this.realExtractor(w.getPropertyValue());
        }
      }
    }
    return 0.0;
  }
  
  public String getStringValue(final UnityObject a, final String b) {
    EList<ConfigAssignment> _configurations = a.getConfigurations();
    for (final ConfigAssignment q : _configurations) {
      EList<Config> _configs = q.getConfigs();
      for (final Config w : _configs) {
        String _name = w.getPropertyName().getName();
        boolean _equals = Objects.equal(_name, b);
        if (_equals) {
          return this.stringExtractor(w.getPropertyValue());
        }
      }
    }
    return "";
  }
  
  public boolean getBoolValue(final UnityObject a, final String b) {
    EList<ConfigAssignment> _configurations = a.getConfigurations();
    for (final ConfigAssignment q : _configurations) {
      EList<Config> _configs = q.getConfigs();
      for (final Config w : _configs) {
        String _name = w.getPropertyName().getName();
        boolean _equals = Objects.equal(_name, b);
        if (_equals) {
          return this.boolExtractor(w.getPropertyValue());
        }
      }
    }
    return false;
  }
  
  public String getVarType(final Attribute p) {
    String _name = p.getPropertyType().getName();
    boolean _equals = Objects.equal(_name, "bool");
    if (_equals) {
      return "bool";
    } else {
      String _name_1 = p.getPropertyType().getName();
      boolean _equals_1 = Objects.equal(_name_1, "int");
      if (_equals_1) {
        return "int";
      } else {
        String _name_2 = p.getPropertyType().getName();
        boolean _equals_2 = Objects.equal(_name_2, "string");
        if (_equals_2) {
          return "string";
        } else {
          return "double";
        }
      }
    }
  }
  
  public String getVarType(final VarType p) {
    if ((p == null)) {
      return "";
    } else {
      String _name = p.getName();
      boolean _equals = Objects.equal(_name, "bool");
      if (_equals) {
        return "bool";
      } else {
        String _name_1 = p.getName();
        boolean _equals_1 = Objects.equal(_name_1, "int");
        if (_equals_1) {
          return "int";
        } else {
          String _name_2 = p.getName();
          boolean _equals_2 = Objects.equal(_name_2, "string");
          if (_equals_2) {
            return "string";
          } else {
            return "double";
          }
        }
      }
    }
  }
  
  public CharSequence sizeAndScale(final UnityObject e, final String a) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("t.localScale = new Vector3 (");
    double _realValue = this.getRealValue(e, "sizeX");
    _builder.append(_realValue);
    _builder.append("f,");
    double _realValue_1 = this.getRealValue(e, "sizeY");
    _builder.append(_realValue_1);
    _builder.append("f,");
    double _realValue_2 = this.getRealValue(e, "sizeZ");
    _builder.append(_realValue_2);
    _builder.append("f);");
    _builder.newLineIfNotEmpty();
    _builder.append("t.localPosition = new Vector3(");
    double _realValue_3 = this.getRealValue(e, "posX");
    _builder.append(_realValue_3);
    _builder.append("f,");
    double _realValue_4 = this.getRealValue(e, "posY");
    _builder.append(_realValue_4);
    _builder.append("f,");
    double _realValue_5 = this.getRealValue(e, "posZ");
    _builder.append(_realValue_5);
    _builder.append("f);");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public CharSequence generic(final Instance e) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("using System.Collections;");
    _builder.newLine();
    _builder.append("using System.Collections.Generic;");
    _builder.newLine();
    _builder.append("using UnityEngine;");
    _builder.newLine();
    _builder.append("public class ");
    String _name = e.getName();
    _builder.append(_name);
    _builder.append("Script : ");
    String _name_1 = e.getInstanceType().getType().getName();
    _builder.append(_name_1);
    _builder.append("MetaObject {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("public sateliteCameraScript cam;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("void Start () {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Rigidbody rb = gameObject.GetComponent<Rigidbody> ();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("rb.mass = ");
    int _intValue = this.getIntValue(e.getInstanceType(), "mass");
    _builder.append(_intValue, "\t\t");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    CharSequence _sizeAndScale = this.sizeAndScale(e.getInstanceType(), e.getInstanceType().getType().getKind());
    _builder.append(_sizeAndScale, "\t\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// load all meshes in model and find the specified mesh");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("MeshFilter myMeshFilter = gameObject.GetComponent<MeshFilter> ();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("GameObject loadedModel = Resources.Load(\"");
    String _stringValue = this.getStringValue(e.getInstanceType(), "model");
    _builder.append(_stringValue, "\t\t");
    _builder.append("\") as GameObject; ");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("// first check object, if not found then check all children.");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if (loadedModel.GetComponent<MeshFilter> () != null && loadedModel.GetComponent<MeshFilter> ().sharedMesh.name ==(\"");
    _builder.newLine();
    String _stringValue_1 = this.getStringValue(e.getInstanceType(), "mesh");
    _builder.append(_stringValue_1);
    _builder.append("\")) {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t");
    _builder.append("myMeshFilter.mesh = loadedModel.GetComponent<MeshFilter> ().sharedMesh;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("} else {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("MeshFilter[] loadedMeshFilters = loadedModel.GetComponentsInChildren<MeshFilter> ();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("foreach (MeshFilter mf in loadedMeshFilters) { ");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("if (mf.sharedMesh.name == \"");
    String _stringValue_2 = this.getStringValue(e.getInstanceType(), "mesh");
    _builder.append(_stringValue_2, "\t\t\t\t");
    _builder.append("\") {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t\t\t");
    _builder.append("myMeshFilter.mesh = mf.sharedMesh; ");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("break;");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// Set the renderer to specified image ");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Renderer myRenderer = gameObject.GetComponent<Renderer>();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("myRenderer.material = new Material(Shader.Find(\"Diffuse\"));");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("myRenderer.material.mainTexture = Resources.Load(\"");
    String _stringValue_3 = this.getStringValue(e.getInstanceType(), "texture");
    _builder.append(_stringValue_3, "\t\t");
    _builder.append("\") as Texture;");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("// Set Collider");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("MeshCollider myMeshCollider = gameObject.GetComponent<MeshCollider> ();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("myMeshCollider.sharedMesh = myMeshFilter.mesh;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("// -- add all new actions");
    _builder.newLine();
    {
      EList<Action> _newActions = e.getInstanceType().getNewActions();
      for(final Action a : _newActions) {
        {
          boolean _equals = a.getName().equals("place");
          if (_equals) {
          } else {
            int counter = 0;
            _builder.newLineIfNotEmpty();
            int counter2 = 0;
            _builder.newLineIfNotEmpty();
            String returnVal = "";
            _builder.newLineIfNotEmpty();
            VarType returnType = null;
            _builder.newLineIfNotEmpty();
            {
              if ((a != null)) {
                _builder.append("   \t");
                _builder.append("public ");
                {
                  Payload _returnPayload = a.getReturnPayload();
                  boolean _tripleEquals = (_returnPayload == null);
                  if (_tripleEquals) {
                    _builder.append("void");
                  } else {
                    {
                      EList<Param> _params = a.getReturnPayload().getParams();
                      for(final Param b : _params) {
                        {
                          if ((b.getType().getName().equals("int") && 
                            (counter2 == 0))) {
                            _builder.append("int");
                            Object _xblockexpression = null;
                            {
                              counter2++;
                              _xblockexpression = null;
                            }
                            _builder.append(_xblockexpression, "   \t");
                            Object _xblockexpression_1 = null;
                            {
                              returnVal = b.getName();
                              _xblockexpression_1 = null;
                            }
                            _builder.append(_xblockexpression_1, "   \t");
                            Object _xblockexpression_2 = null;
                            {
                              returnType = b.getType();
                              _xblockexpression_2 = null;
                            }
                            _builder.append(_xblockexpression_2, "   \t");
                          } else {
                            if ((b.getType().getName().equals("string") && (counter2 == 0))) {
                              _builder.append("string");
                              Object _xblockexpression_3 = null;
                              {
                                counter2++;
                                _xblockexpression_3 = null;
                              }
                              _builder.append(_xblockexpression_3, "   \t");
                              Object _xblockexpression_4 = null;
                              {
                                returnVal = b.getName();
                                _xblockexpression_4 = null;
                              }
                              _builder.append(_xblockexpression_4, "   \t");
                              _builder.newLineIfNotEmpty();
                              Object _xblockexpression_5 = null;
                              {
                                returnType = b.getType();
                                _xblockexpression_5 = null;
                              }
                              _builder.append(_xblockexpression_5);
                            } else {
                              if ((b.getType().getName().equals("real") && (counter2 == 0))) {
                                _builder.append("double");
                                Object _xblockexpression_6 = null;
                                {
                                  counter2++;
                                  _xblockexpression_6 = null;
                                }
                                _builder.append(_xblockexpression_6, "   \t");
                                _builder.newLineIfNotEmpty();
                                Object _xblockexpression_7 = null;
                                {
                                  returnVal = b.getName();
                                  _xblockexpression_7 = null;
                                }
                                _builder.append(_xblockexpression_7);
                                Object _xblockexpression_8 = null;
                                {
                                  returnType = b.getType();
                                  _xblockexpression_8 = null;
                                }
                                _builder.append(_xblockexpression_8);
                              } else {
                                if ((b.getType().getName().equals("bool") && (counter2 == 0))) {
                                  _builder.append("boolean");
                                  Object _xblockexpression_9 = null;
                                  {
                                    counter2++;
                                    _xblockexpression_9 = null;
                                  }
                                  _builder.append(_xblockexpression_9, "   \t");
                                  _builder.newLineIfNotEmpty();
                                  Object _xblockexpression_10 = null;
                                  {
                                    returnVal = b.getName();
                                    _xblockexpression_10 = null;
                                  }
                                  _builder.append(_xblockexpression_10);
                                  Object _xblockexpression_11 = null;
                                  {
                                    returnType = b.getType();
                                    _xblockexpression_11 = null;
                                  }
                                  _builder.append(_xblockexpression_11);
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
                _builder.append(" ");
                String _name_2 = a.getName();
                _builder.append(_name_2, "   \t");
                _builder.append("(");
                {
                  Payload _payload = a.getPayload();
                  boolean _tripleNotEquals = (_payload != null);
                  if (_tripleNotEquals) {
                    _builder.newLineIfNotEmpty();
                    {
                      EList<Param> _params_1 = a.getPayload().getParams();
                      for(final Param b_1 : _params_1) {
                        String _name_3 = b_1.getType().getName();
                        _builder.append(_name_3);
                        _builder.append(" ");
                        String _name_4 = b_1.getName();
                        _builder.append(_name_4);
                        Object _xblockexpression_12 = null;
                        {
                          counter++;
                          _xblockexpression_12 = null;
                        }
                        _builder.append(_xblockexpression_12);
                        {
                          int _length = ((Object[])Conversions.unwrapArray(a.getPayload().getParams(), Object.class)).length;
                          boolean _lessThan = (counter < _length);
                          if (_lessThan) {
                            _builder.append(",");
                          }
                        }
                      }
                    }
                  }
                }
                _builder.append("){");
                _builder.newLineIfNotEmpty();
                _builder.append("   \t");
                _builder.append("\t");
                {
                  Payload _returnPayload_1 = a.getReturnPayload();
                  boolean _tripleNotEquals_1 = (_returnPayload_1 != null);
                  if (_tripleNotEquals_1) {
                    String _varType = this.getVarType(returnType);
                    _builder.append(_varType, "   \t\t");
                    _builder.append(" ");
                    _builder.append(returnVal, "   \t\t");
                    _builder.append(";");
                  }
                }
                _builder.newLineIfNotEmpty();
                {
                  EList<Expression> _expressions = a.getExpressions();
                  for(final Expression v : _expressions) {
                    _builder.append("   \t");
                    _builder.append("\t");
                    String _stringify = this.stringify(v, "", e.getInstanceType().getType());
                    _builder.append(_stringify, "   \t\t");
                    _builder.append(";");
                    _builder.newLineIfNotEmpty();
                  }
                }
                _builder.append("   \t");
                _builder.append("\t");
                {
                  Payload _returnPayload_2 = a.getReturnPayload();
                  boolean _tripleNotEquals_2 = (_returnPayload_2 != null);
                  if (_tripleNotEquals_2) {
                    _builder.append("return ");
                    _builder.append(returnVal, "   \t\t");
                    _builder.append(";");
                  }
                }
                _builder.newLineIfNotEmpty();
                _builder.append("   \t");
                _builder.append("}");
                _builder.newLine();
              }
            }
          }
        }
      }
    }
    _builder.append("\t   \t\t   ");
    _builder.newLine();
    _builder.append("\t   \t\t   \t");
    _builder.append("// -- End adding all new actions");
    _builder.newLine();
    _builder.append("\t   \t\t   \t");
    _builder.append("// -- overide existing actions");
    _builder.newLine();
    {
      EList<OverrideAction> _overrideActions = e.getInstanceType().getOverrideActions();
      for(final OverrideAction a_1 : _overrideActions) {
        _builder.append("\t   \t\t   \t");
        _builder.append("public override string ");
        String _name_5 = a_1.getActionName().getName();
        _builder.append(_name_5, "\t   \t\t   \t");
        _builder.append("(){");
        _builder.newLineIfNotEmpty();
        _builder.append("\t   \t\t   \t");
        _builder.append("\t");
        _builder.append("base.");
        String _name_6 = a_1.getActionName().getName();
        _builder.append(_name_6, "\t   \t\t   \t\t");
        _builder.append("();");
        _builder.newLineIfNotEmpty();
        {
          EList<Expression> _expressions_1 = a_1.getExpressions();
          for(final Expression v_1 : _expressions_1) {
            _builder.append("\t   \t\t   \t");
            _builder.append("\t");
            String _stringify_1 = this.stringify(v_1, "", e.getInstanceType().getType());
            _builder.append(_stringify_1, "\t   \t\t   \t\t");
            _builder.append(";");
            _builder.newLineIfNotEmpty();
          }
        }
        _builder.append("\t   \t\t   \t");
        _builder.append("\t   \t");
        _builder.append("}");
        _builder.newLine();
      }
    }
    _builder.append("\t   \t\t   \t ");
    _builder.append("// -- End overrideActions");
    _builder.newLine();
    _builder.append("\t   \t\t   \t ");
    _builder.newLine();
    _builder.append("\t   \t\t   \t ");
    _builder.append("// -- Handle incoming message");
    _builder.newLine();
    _builder.append("\t   \t\t\t");
    _builder.append("public string translate(string message){");
    _builder.newLine();
    _builder.append("\t   \t\t\t\t");
    _builder.append("// -- Update basic object properties");
    _builder.newLine();
    _builder.append("\t   \t\t\t\t");
    _builder.append("statusUpdate();");
    _builder.newLine();
    _builder.append("\t   \t\t\t\t");
    _builder.append("//--Get parameters as strings.");
    _builder.newLine();
    _builder.append("\t   \t\t\t\t");
    _builder.append("string name = message.Substring (0, message.IndexOf (\'(\'));");
    _builder.newLine();
    _builder.append("\t   \t\t\t\t");
    _builder.append("message = cut(message,\'(\');");
    _builder.newLine();
    _builder.append("\t   \t\t\t\t");
    _builder.append("string [] param = extractParam(message);");
    _builder.newLine();
    _builder.append("\t   \t\t\t\t");
    _builder.newLine();
    _builder.append("\t   \t\t\t\t");
    _builder.newLine();
    _builder.append("\t   \t\t\t\t");
    _builder.newLine();
    {
      EList<Action> _newActions_1 = e.getInstanceType().getNewActions();
      for(final Action a_2 : _newActions_1) {
        _builder.append("\t   \t\t   \t");
        int counter_1 = 0;
        _builder.newLineIfNotEmpty();
        _builder.append("\t   \t\t   \t");
        _builder.append("\t");
        _builder.append("if(name == \"");
        String _name_7 = a_2.getName();
        _builder.append(_name_7, "\t   \t\t   \t\t");
        _builder.append("\"){");
        _builder.newLineIfNotEmpty();
        {
          boolean _equals_1 = a_2.getName().equals("place");
          if (_equals_1) {
            _builder.append("\t   \t\t   \t");
            _builder.append("\t\t");
            _builder.append("GameObject temp = (GameObject)Instantiate(Resources.Load(\"");
            {
              EList<Expression> _expressions_2 = a_2.getExpressions();
              for(final Expression z : _expressions_2) {
                _builder.newLineIfNotEmpty();
                String _stringExtractor = this.stringExtractor(z);
                _builder.append(_stringExtractor);
              }
            }
            _builder.append("\"),transform.position,transform.rotation);");
            _builder.newLineIfNotEmpty();
            _builder.append("\t   \t\t   \t");
            _builder.append("\t\t");
            _builder.append("temp.transform.Rotate(90f,0,0);");
            _builder.newLine();
            _builder.append("\t   \t\t   \t");
            _builder.append("\t\t");
            _builder.append("lastx = transform.position.x;");
            _builder.newLine();
            _builder.append("\t   \t\t   \t");
            _builder.append("\t\t");
            _builder.append("lastz = transform.position.z;");
            _builder.newLine();
          } else {
            {
              Payload _returnPayload_3 = a_2.getReturnPayload();
              boolean _tripleNotEquals_3 = (_returnPayload_3 != null);
              if (_tripleNotEquals_3) {
                _builder.append("return \"\"+");
              }
            }
            _builder.append(" ");
            String _name_8 = a_2.getName();
            _builder.append(_name_8);
            _builder.append("(");
            {
              Payload _payload_1 = a_2.getPayload();
              boolean _tripleNotEquals_4 = (_payload_1 != null);
              if (_tripleNotEquals_4) {
                _builder.newLineIfNotEmpty();
                {
                  EList<Param> _params_2 = a_2.getPayload().getParams();
                  for(final Param b_2 : _params_2) {
                    {
                      boolean _equals_2 = b_2.getType().getName().equals("int");
                      if (_equals_2) {
                        _builder.append("Int32.Parse");
                      }
                    }
                    {
                      boolean _equals_3 = b_2.getType().getName().equals("bool");
                      if (_equals_3) {
                        _builder.append("Boolean.Parse");
                      }
                    }
                    _builder.newLineIfNotEmpty();
                    {
                      boolean _equals_4 = b_2.getType().getName().equals("real");
                      if (_equals_4) {
                        _builder.append("double.Parse");
                      }
                    }
                    _builder.append("(param[");
                    int _plusPlus = counter_1++;
                    _builder.append(_plusPlus);
                    _builder.append("])");
                    {
                      int _length_1 = ((Object[])Conversions.unwrapArray(a_2.getPayload().getParams(), Object.class)).length;
                      boolean _lessThan_1 = (counter_1 < _length_1);
                      if (_lessThan_1) {
                        _builder.append(",");
                      }
                    }
                  }
                }
              }
            }
            _builder.append(");");
            _builder.newLineIfNotEmpty();
          }
        }
        _builder.append("\t   \t\t   \t");
        _builder.append("\t ");
        _builder.append("}");
        _builder.newLine();
      }
    }
    {
      EList<Action> _actions = e.getInstanceType().getType().getActions();
      for(final Action a_3 : _actions) {
        _builder.append("\t   \t\t   \t");
        int counter_2 = 0;
        _builder.newLineIfNotEmpty();
        _builder.append("\t   \t\t   \t");
        _builder.append("\t");
        _builder.append("if(name == \"");
        String _name_9 = a_3.getName();
        _builder.append(_name_9, "\t   \t\t   \t\t");
        _builder.append("\"){");
        _builder.newLineIfNotEmpty();
        _builder.append("\t   \t\t   \t");
        _builder.append("\t");
        {
          Payload _returnPayload_4 = a_3.getReturnPayload();
          boolean _tripleNotEquals_5 = (_returnPayload_4 != null);
          if (_tripleNotEquals_5) {
            _builder.append("return \"\"+");
          }
        }
        _builder.append(" ");
        String _name_10 = a_3.getName();
        _builder.append(_name_10, "\t   \t\t   \t\t");
        _builder.append("(");
        {
          Payload _payload_2 = a_3.getPayload();
          boolean _tripleNotEquals_6 = (_payload_2 != null);
          if (_tripleNotEquals_6) {
            _builder.newLineIfNotEmpty();
            {
              EList<Param> _params_3 = a_3.getPayload().getParams();
              for(final Param b_3 : _params_3) {
                {
                  boolean _equals_5 = b_3.getType().getName().equals("int");
                  if (_equals_5) {
                    _builder.append("Int32.Parse");
                  }
                }
                {
                  boolean _equals_6 = b_3.getType().getName().equals("bool");
                  if (_equals_6) {
                    _builder.append("Boolean.Parse");
                  }
                }
                _builder.newLineIfNotEmpty();
                {
                  boolean _equals_7 = b_3.getType().getName().equals("real");
                  if (_equals_7) {
                    _builder.append("double.Parse");
                  }
                }
                _builder.append("(param[");
                int _plusPlus_1 = counter_2++;
                _builder.append(_plusPlus_1);
                _builder.append("])");
                {
                  int _length_2 = ((Object[])Conversions.unwrapArray(a_3.getPayload().getParams(), Object.class)).length;
                  boolean _lessThan_2 = (counter_2 < _length_2);
                  if (_lessThan_2) {
                    _builder.append(",");
                  }
                }
              }
            }
          }
        }
        _builder.append(");");
        _builder.newLineIfNotEmpty();
        _builder.append("\t   \t\t   \t");
        _builder.append("\t");
        _builder.append("}");
        _builder.newLine();
      }
    }
    {
      if (((((Object[])Conversions.unwrapArray(e.getInstanceType().getType().getActions(), Object.class)).length != 0) && (((Object[])Conversions.unwrapArray(e.getInstanceType().getNewActions(), Object.class)).length != 0))) {
        _builder.append("\t   \t\t   \t");
        _builder.append("else return \"\";");
        _builder.newLine();
      }
    }
    _builder.append("\t   \t\t   \t");
    _builder.append("return \"\";");
    _builder.newLine();
    _builder.append("\t   \t\t   \t");
    _builder.append("} ");
    _builder.newLine();
    _builder.append("\t   \t\t   \t");
    _builder.append("// -- End message handling");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("void Update () {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// on going monitoring or changing things based on object");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("void focus(){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("cam.observedObject = gameObject;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("// -- utils");
    _builder.newLine();
    _builder.append("\t   \t\t     ");
    _builder.append("public string cut(string message,char cutter){");
    _builder.newLine();
    _builder.append("\t   \t\t   \t \t");
    _builder.append("return message.Substring(message.IndexOf(cutter)+1);");
    _builder.newLine();
    _builder.append("\t   \t\t   \t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t   \t\t   \t");
    _builder.append("public string[] extractParam(string message){");
    _builder.newLine();
    _builder.append("\t   \t\t   \t\t");
    _builder.append("message = message.Substring(message.IndexOf(\"(\")+1,(message.IndexOf(\")\")));");
    _builder.newLine();
    _builder.append("\t   \t\t   \t    ");
    _builder.append("return message.Split(\',\');");
    _builder.newLine();
    _builder.append("\t   \t\t   \t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence starter(final ENV e) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("using System.Collections;");
    _builder.newLine();
    _builder.append("using System.Collections.Generic;");
    _builder.newLine();
    _builder.append("using UnityEngine;");
    _builder.newLine();
    _builder.append("   \t\t");
    _builder.newLine();
    _builder.append("public class starter : MonoBehaviour {");
    _builder.newLine();
    _builder.append("// ---- These must be assigned as prefabs in Unity and as \"metaobjects\" in the DSL");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public sateliteCameraScript Camera;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("GameObject CameraObject;");
    _builder.newLine();
    {
      EList<Instance> _instances = e.getInstances();
      for(final Instance k : _instances) {
        _builder.append("GameObject ");
        String _name = k.getName();
        _builder.append(_name);
        _builder.append("Object;");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("//-----");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("void Start () {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("Application.runInBackground = true;");
    _builder.newLine();
    _builder.append("//-- adding the necessary instances");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("CameraObject = (GameObject)Instantiate (Resources.Load(\"CameraController\"),transform);");
    _builder.newLine();
    _builder.append("   \t");
    _builder.newLine();
    {
      EList<Instance> _instances_1 = e.getInstances();
      for(final Instance k_1 : _instances_1) {
        _builder.append("   \t");
        String _name_1 = k_1.getName();
        _builder.append(_name_1, "   \t");
        _builder.append("Object = (GameObject)Instantiate (Resources.Load(\"");
        String _name_2 = k_1.getInstanceType().getType().getName();
        _builder.append(_name_2, "   \t");
        _builder.append("\"),transform);");
        _builder.newLineIfNotEmpty();
        _builder.append("   \t");
        String _name_3 = k_1.getName();
        _builder.append(_name_3, "   \t");
        _builder.append("Object.AddComponent<");
        String _name_4 = k_1.getName();
        _builder.append(_name_4, "   \t");
        _builder.append("Script>();");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("//adding the necessary channel information scripts\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("Camera = CameraObject.GetComponent<sateliteCameraScript>();");
    _builder.newLine();
    _builder.append("   \t");
    _builder.append("Camera.observedObject = ");
    String _name_5 = e.getFocus().getFocusObject().getName();
    _builder.append(_name_5, "   \t");
    _builder.append("Object;");
    _builder.newLineIfNotEmpty();
    _builder.append("   \t");
    _builder.append("Camera.off = new Vector3(");
    double _dx = e.getFocus().getDx();
    _builder.append(_dx, "   \t");
    _builder.append("f,");
    double _dy = e.getFocus().getDy();
    _builder.append(_dy, "   \t");
    _builder.append("f,");
    double _dz = e.getFocus().getDz();
    _builder.append(_dz, "   \t");
    _builder.append("f);");
    _builder.newLineIfNotEmpty();
    {
      EList<Channel> _channels = e.getChannels();
      for(final Channel k_2 : _channels) {
        _builder.append("   \t");
        _builder.append("gameObject.AddComponent<ChannelController");
        String _name_6 = k_2.getName();
        _builder.append(_name_6, "   \t");
        _builder.append(">();");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("void Update(){//");
    int i = 0;
    _builder.newLineIfNotEmpty();
    {
      EList<Instance> _instances_2 = e.getInstances();
      for(final Instance k_3 : _instances_2) {
        _builder.append("\t\t");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("\t");
        _builder.append("if (Input.GetKeyDown(KeyCode.Alpha");
        _builder.append(i = (i + 1), "\t\t\t");
        _builder.append(")){");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("\t\t");
        _builder.append("Camera.observedObject = ");
        String _name_7 = k_3.getName();
        _builder.append(_name_7, "\t\t\t\t");
        _builder.append("Object;");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("\t");
        _builder.append("}");
        _builder.newLine();
      }
    }
    _builder.append("\t\t\t");
    _builder.append("if (Input.GetKeyDown(KeyCode.Z)){");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("Camera.follow = true;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("if (Input.GetKeyDown(KeyCode.X)){ ");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("Camera.follow = false;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("if (Input.GetKeyDown(KeyCode.LeftArrow)){");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("Camera.transform.Rotate (0, -10, 0);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("if (Input.GetKeyDown(KeyCode.RightArrow)){");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("Camera.transform.Rotate (0, 10, 0);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence channelcontroller(final Channel c) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("using System.Collections;");
    _builder.newLine();
    _builder.append("using System.Collections.Generic;");
    _builder.newLine();
    _builder.append("using UnityEngine;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class ChannelController");
    String _name = c.getName();
    _builder.append(_name);
    _builder.append(" : MonoBehaviour {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("public Network externalComm;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public string myName = \"");
    String _name_1 = c.getName();
    _builder.append(_name_1, "\t");
    _builder.append("\";");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("void Start () {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("externalComm = new Network(");
    int _portnumber = c.getPort().getPortnumber();
    _builder.append(_portnumber, "\t\t");
    _builder.append(",myName,20); // port, net ID, Container size");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("externalComm.StartNetwork();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("void Update () {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if (externalComm.isContainerEmpty () == false) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("route(externalComm.getMessage());");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("// take out the important information from the message");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void route(string S){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if (S != null && S.Equals(\"\")== false && S.Length>0) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("string name = S.Substring (0, S.IndexOf (\',\'));");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("S = cut (S);");
    _builder.newLine();
    _builder.append("// send the message on to the designated recipient inout");
    _builder.newLine();
    _builder.newLine();
    {
      EList<Instance> _boundInstances = c.getBoundInstances();
      for(final Instance q : _boundInstances) {
        _builder.append("\t");
        _builder.append("if (name == \"");
        String _name_2 = q.getName();
        _builder.append(_name_2, "\t");
        _builder.append("\") {");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("\t");
        String _name_3 = q.getName();
        _builder.append(_name_3, "\t\t");
        _builder.append("Script ");
        String _name_4 = q.getName();
        _builder.append(_name_4, "\t\t");
        _builder.append(" = GetComponentInChildren<");
        String _name_5 = q.getName();
        _builder.append(_name_5, "\t\t");
        _builder.append("Script> ();");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\t");
        _builder.append("// send the action name, return the reply that is generated");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\t");
        _builder.append("string reply = ");
        String _name_6 = q.getName();
        _builder.append(_name_6, "\t\t");
        _builder.append(".translate (S);");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("\t");
        _builder.append("// if there is a reply send one");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\t");
        _builder.append("if (reply.Equals(\"\") == false && reply != null&& S.Length>0)");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\t\t");
        _builder.append("externalComm.SendMessage(\"");
        String _name_7 = q.getName();
        _builder.append(_name_7, "\t\t\t");
        _builder.append(",\"+reply+\";\");");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("\t");
        _builder.append("}");
        _builder.newLine();
      }
    }
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public string cut(string message){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return message.Substring(message.IndexOf(\',\')+1);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public String getValue(final String s) {
    int _indexOf = s.indexOf(":");
    int _plus = (_indexOf + 1);
    return s.substring(_plus);
  }
  
  public String extractType(final String s) {
    int _indexOf = s.indexOf("<");
    int _plus = (_indexOf + 1);
    return s.substring(_plus, s.indexOf(">"));
  }
  
  public String extractName(final String s) {
    return s.substring(0, s.indexOf("="));
  }
  
  public CharSequence readLibInit(final String s) {
    StringConcatenation _builder = new StringConcatenation();
    {
      for(final String a : this.lines) {
        {
          boolean _contains = a.contains((s + ":"));
          if (_contains) {
            _builder.append("public ");
            String _extractType = this.extractType(this.getValue(a));
            _builder.append(_extractType);
            _builder.append(" ");
            String _extractName = this.extractName(this.getValue(a));
            _builder.append(_extractName);
            _builder.append(";");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    return _builder;
  }
  
  public CharSequence allClass(final MetaObject m) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("using UnityEngine;");
    _builder.newLine();
    _builder.append("using System.Collections;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class ");
    String _name = m.getName();
    _builder.append(_name);
    _builder.append("MetaObject : MonoBehaviour {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public Transform t;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("// --- Get neccessary access components");
    _builder.newLine();
    _builder.append("\t");
    CharSequence _readLibInit = this.readLibInit(m.getName());
    _builder.append(_readLibInit, "\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("// --- End Get neccessary access components");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public double posx;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public double posy;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public double posz;");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public double sizex;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public double sizey;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public double sizez;");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("void update(){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("posx = t.localPosition.x;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("posy = t.localPosition.y;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("posz = t.localPosition.z;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("sizex = t.localScale.x;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("sizey = t.localScale.y;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("sizez = t.localScale.z;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void requiredStart(){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("t = GetComponent<Transform>();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// --- Load components");
    _builder.newLine();
    {
      for(final String a : this.lines) {
        {
          String _name_1 = m.getName();
          String _plus = (_name_1 + ":");
          boolean _contains = a.contains(_plus);
          if (_contains) {
            _builder.append("\t\t");
            int _indexOf = a.indexOf(":");
            int _plus_1 = (_indexOf + 1);
            String _substring = a.substring(_plus_1);
            _builder.append(_substring, "\t\t");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    _builder.append("\t\t");
    _builder.append("// --- End Load components");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t   ");
    _builder.append("// -- DSL generated \"actions\"");
    _builder.newLine();
    _builder.newLine();
    boolean isStart = false;
    _builder.newLineIfNotEmpty();
    {
      EList<Action> _actions = m.getActions();
      for(final Action a_1 : _actions) {
        int counter = 0;
        _builder.newLineIfNotEmpty();
        boolean commas = false;
        _builder.newLineIfNotEmpty();
        {
          if ((a_1 != null)) {
            _builder.newLine();
            _builder.append("\t ");
            _builder.append("public ");
            {
              Payload _returnPayload = a_1.getReturnPayload();
              boolean _tripleEquals = (_returnPayload == null);
              if (_tripleEquals) {
                _builder.append("void");
              } else {
                _builder.append("string");
              }
            }
            _builder.append(" ");
            String _name_2 = a_1.getName();
            _builder.append(_name_2, "\t ");
            _builder.append("(");
            {
              Payload _payload = a_1.getPayload();
              boolean _tripleNotEquals = (_payload != null);
              if (_tripleNotEquals) {
                {
                  EList<Param> _params = a_1.getPayload().getParams();
                  for(final Param b : _params) {
                    String _varType = this.getVarType(b.getType());
                    _builder.append(_varType, "\t ");
                    _builder.append(" ");
                    String _name_3 = b.getName();
                    _builder.append(_name_3, "\t ");
                    Object _xblockexpression = null;
                    {
                      counter++;
                      _xblockexpression = null;
                    }
                    _builder.append(_xblockexpression, "\t ");
                    {
                      int _length = ((Object[])Conversions.unwrapArray(a_1.getPayload().getParams(), Object.class)).length;
                      boolean _lessThan = (counter < _length);
                      if (_lessThan) {
                        _builder.append(",");
                      }
                    }
                  }
                }
              }
            }
            _builder.append("){");
            _builder.newLineIfNotEmpty();
            _builder.newLine();
            {
              Payload _returnPayload_1 = a_1.getReturnPayload();
              boolean _tripleNotEquals_1 = (_returnPayload_1 != null);
              if (_tripleNotEquals_1) {
                {
                  EList<Param> _params_1 = a_1.getReturnPayload().getParams();
                  for(final Param u : _params_1) {
                    {
                      VarType _type = u.getType();
                      boolean _tripleNotEquals_2 = (_type != null);
                      if (_tripleNotEquals_2) {
                        String _varType_1 = this.getVarType(u.getType());
                        _builder.append(_varType_1);
                      }
                    }
                    _builder.append(" ");
                    String _name_4 = u.getName();
                    _builder.append(_name_4);
                    _builder.append(";");
                    _builder.newLineIfNotEmpty();
                  }
                }
              }
            }
            _builder.append("\t");
            _builder.newLine();
            _builder.append("\t");
            {
              String _name_5 = a_1.getName();
              boolean _equals = Objects.equal(_name_5, "Start");
              if (_equals) {
                _builder.append("requiredStart();");
                Object _xblockexpression_1 = null;
                {
                  isStart = true;
                  _xblockexpression_1 = null;
                }
                _builder.append(_xblockexpression_1, "\t");
              }
            }
            _builder.newLineIfNotEmpty();
            {
              EList<Expression> _expressions = a_1.getExpressions();
              for(final Expression v : _expressions) {
                _builder.append("\t");
                String _stringify = this.stringify(v, "", m);
                _builder.append(_stringify, "\t");
                _builder.append(";");
                _builder.newLineIfNotEmpty();
              }
            }
            _builder.append("\t");
            _builder.newLine();
            _builder.append("\t");
            {
              Payload _returnPayload_2 = a_1.getReturnPayload();
              boolean _tripleNotEquals_3 = (_returnPayload_2 != null);
              if (_tripleNotEquals_3) {
                _builder.append("return ");
                {
                  EList<Param> _params_2 = a_1.getReturnPayload().getParams();
                  for(final Param u_1 : _params_2) {
                    {
                      if ((commas == true)) {
                        _builder.append("+\",\"+");
                      } else {
                        Object _xblockexpression_2 = null;
                        {
                          commas = true;
                          _xblockexpression_2 = null;
                        }
                        _builder.append(_xblockexpression_2, "\t");
                      }
                    }
                    String _name_6 = u_1.getName();
                    _builder.append(_name_6, "\t");
                  }
                }
                _builder.append("+\"\";");
              }
            }
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("}");
            _builder.newLine();
          }
        }
      }
    }
    _builder.newLine();
    _builder.append("\t");
    {
      if ((isStart == false)) {
        _builder.append(" // if start is not defined in metaobject we define it here.");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("void Start(){");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\t");
        _builder.append("requiredStart();");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("}");
        _builder.newLine();
      }
    }
    _builder.append("\t");
    _builder.append("// -- End DSL generated functions");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("// --- Utility functions");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public string cut(string message,char cutter){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return message.Substring(message.IndexOf(cutter)+1);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public string[] extractParam(string message){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("message = message.Substring(message.IndexOf(\"(\")+1,(message.IndexOf(\")\")));");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return message.Split(\',\');");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence allObject(final Instance e) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("using System.Collections;");
    _builder.newLine();
    _builder.append("using System.Collections.Generic;");
    _builder.newLine();
    _builder.append("using System;");
    _builder.newLine();
    _builder.append("using UnityEngine;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class ");
    String _name = e.getName();
    _builder.append(_name);
    _builder.append("Script : ");
    String _name_1 = e.getInstanceType().getType().getName();
    _builder.append(_name_1);
    _builder.append("MetaObject {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("public string channelID;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("// --- auto declare all \"properties\"");
    _builder.newLine();
    {
      EList<Attribute> _properties = e.getInstanceType().getProperties();
      for(final Attribute a : _properties) {
        {
          String _name_2 = a.getPropertyType().getName();
          boolean _equals = Objects.equal(_name_2, "int");
          if (_equals) {
            _builder.append("int ");
            String _name_3 = a.getName();
            _builder.append(_name_3);
            _builder.append(";");
            _builder.newLineIfNotEmpty();
          }
        }
        _builder.append("   \t");
        {
          String _name_4 = a.getPropertyType().getName();
          boolean _equals_1 = Objects.equal(_name_4, "real");
          if (_equals_1) {
            _builder.append("double ");
            String _name_5 = a.getName();
            _builder.append(_name_5, "   \t");
            _builder.append(";");
            _builder.newLineIfNotEmpty();
          }
        }
        _builder.append("   \t");
        {
          String _name_6 = a.getPropertyType().getName();
          boolean _equals_2 = Objects.equal(_name_6, "string");
          if (_equals_2) {
            _builder.append("string ");
            String _name_7 = a.getName();
            _builder.append(_name_7, "   \t");
            _builder.append(";");
            _builder.newLineIfNotEmpty();
          }
        }
        _builder.append("   \t");
        {
          String _name_8 = a.getPropertyType().getName();
          boolean _equals_3 = Objects.equal(_name_8, "bool");
          if (_equals_3) {
            _builder.append("bool ");
            String _name_9 = a.getName();
            _builder.append(_name_9, "   \t");
            _builder.append(";");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    _builder.append("\t");
    _builder.append("// --- End auto declare properties");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("// --- Initialize object size/position");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("void Start(){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("requiredStart();");
    _builder.newLine();
    _builder.append("\t\t");
    CharSequence _sizeAndScale = this.sizeAndScale(e.getInstanceType(), e.getInstanceType().getType().getName());
    _builder.append(_sizeAndScale, "\t\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("// --- End start function");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("// --- Add all new actions");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("// -- DSL generated \"actions\"");
    _builder.newLine();
    _builder.append("\t");
    boolean isStart = false;
    _builder.newLineIfNotEmpty();
    {
      EList<Action> _newActions = e.getInstanceType().getNewActions();
      for(final Action a_1 : _newActions) {
        int counter = 0;
        _builder.newLineIfNotEmpty();
        boolean commas = false;
        _builder.newLineIfNotEmpty();
        {
          if ((a_1 != null)) {
            _builder.append("   \t");
            _builder.append("public ");
            {
              Payload _returnPayload = a_1.getReturnPayload();
              boolean _tripleEquals = (_returnPayload == null);
              if (_tripleEquals) {
                _builder.append("void");
              } else {
                _builder.append("string");
              }
            }
            _builder.append(" ");
            String _name_10 = a_1.getName();
            _builder.append(_name_10, "   \t");
            _builder.append("(");
            {
              Payload _payload = a_1.getPayload();
              boolean _tripleNotEquals = (_payload != null);
              if (_tripleNotEquals) {
                {
                  EList<Param> _params = a_1.getPayload().getParams();
                  for(final Param b : _params) {
                    String _varType = this.getVarType(b.getType());
                    _builder.append(_varType, "   \t");
                    _builder.append(" ");
                    String _name_11 = b.getName();
                    _builder.append(_name_11, "   \t");
                    Object _xblockexpression = null;
                    {
                      counter++;
                      _xblockexpression = null;
                    }
                    _builder.append(_xblockexpression, "   \t");
                    {
                      int _length = ((Object[])Conversions.unwrapArray(a_1.getPayload().getParams(), Object.class)).length;
                      boolean _lessThan = (counter < _length);
                      if (_lessThan) {
                        _builder.append(",");
                      }
                    }
                  }
                }
              }
            }
            _builder.append("){");
            _builder.newLineIfNotEmpty();
            {
              Payload _returnPayload_1 = a_1.getReturnPayload();
              boolean _tripleNotEquals_1 = (_returnPayload_1 != null);
              if (_tripleNotEquals_1) {
                {
                  EList<Param> _params_1 = a_1.getReturnPayload().getParams();
                  for(final Param u : _params_1) {
                    {
                      VarType _type = u.getType();
                      boolean _tripleNotEquals_2 = (_type != null);
                      if (_tripleNotEquals_2) {
                        String _varType_1 = this.getVarType(u.getType());
                        _builder.append(_varType_1);
                      }
                    }
                    _builder.append(" ");
                    String _name_12 = u.getName();
                    _builder.append(_name_12);
                    _builder.append(";");
                    _builder.newLineIfNotEmpty();
                  }
                }
              }
            }
            _builder.append("   \t");
            _builder.append("\t\t");
            {
              String _name_13 = a_1.getName();
              boolean _equals_4 = Objects.equal(_name_13, "Start");
              if (_equals_4) {
                _builder.append("requiredStart();");
                Object _xblockexpression_1 = null;
                {
                  isStart = true;
                  _xblockexpression_1 = null;
                }
                _builder.append(_xblockexpression_1, "   \t\t\t");
              }
            }
            _builder.newLineIfNotEmpty();
            {
              EList<Expression> _expressions = a_1.getExpressions();
              for(final Expression v : _expressions) {
                _builder.append("   \t");
                _builder.append("\t\t");
                String _stringify = this.stringify(v, "", e.getInstanceType().getType());
                _builder.append(_stringify, "   \t\t\t");
                _builder.append(";");
                _builder.newLineIfNotEmpty();
              }
            }
            _builder.append("   \t");
            _builder.append("\t\t");
            {
              Payload _returnPayload_2 = a_1.getReturnPayload();
              boolean _tripleNotEquals_3 = (_returnPayload_2 != null);
              if (_tripleNotEquals_3) {
                _builder.append("return ");
                {
                  EList<Param> _params_2 = a_1.getReturnPayload().getParams();
                  for(final Param u_1 : _params_2) {
                    {
                      if ((commas == true)) {
                        _builder.append("+\",\"+");
                      } else {
                        Object _xblockexpression_2 = null;
                        {
                          commas = true;
                          _xblockexpression_2 = null;
                        }
                        _builder.append(_xblockexpression_2, "   \t\t\t");
                      }
                    }
                    String _name_14 = u_1.getName();
                    _builder.append(_name_14, "   \t\t\t");
                  }
                }
                _builder.append("+\"\";");
              }
            }
            _builder.newLineIfNotEmpty();
            _builder.append("   \t");
            _builder.append("\t");
            _builder.append("}");
            _builder.newLine();
          }
        }
      }
    }
    _builder.append("\t");
    _builder.append("// --- End adding all new actions");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("// --- Overide existing actions");
    _builder.newLine();
    {
      EList<OverrideAction> _overrideActions = e.getInstanceType().getOverrideActions();
      for(final OverrideAction a_2 : _overrideActions) {
        _builder.append("\t");
        _builder.append("public override string ");
        String _name_15 = a_2.getActionName().getName();
        _builder.append(_name_15, "\t");
        _builder.append("(){");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("base.");
        String _name_16 = a_2.getActionName().getName();
        _builder.append(_name_16, "\t");
        _builder.append("();");
        _builder.newLineIfNotEmpty();
        {
          EList<Expression> _expressions_1 = a_2.getExpressions();
          for(final Expression v_1 : _expressions_1) {
            String _stringify_1 = this.stringify(v_1, "", e.getInstanceType().getType());
            _builder.append(_stringify_1);
            _builder.append(";");
            _builder.newLineIfNotEmpty();
          }
        }
        _builder.append("\t");
        _builder.append("}");
        _builder.newLine();
      }
    }
    _builder.append("\t");
    _builder.append("// --- End overrideActions");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("// --- Begin message handling");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public string translate(string message){\t   \t\t\t\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("//--Get parameters as strings.");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("string name = message.Substring (0, message.IndexOf (\'(\'));");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("message = cut(message,\'(\');");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("string [] param = extractParam(message);");
    _builder.newLine();
    _builder.newLine();
    {
      EList<Action> _newActions_1 = e.getInstanceType().getNewActions();
      for(final Action a_3 : _newActions_1) {
        _builder.append("   \t");
        int counter_1 = 0;
        _builder.newLineIfNotEmpty();
        _builder.append("   \t");
        _builder.append("\t");
        _builder.append("if(name == \"");
        String _name_17 = a_3.getName();
        _builder.append(_name_17, "   \t\t");
        _builder.append("\"){");
        _builder.newLineIfNotEmpty();
        _builder.append("   \t");
        _builder.append("\t\t");
        {
          Payload _returnPayload_3 = a_3.getReturnPayload();
          boolean _tripleNotEquals_4 = (_returnPayload_3 != null);
          if (_tripleNotEquals_4) {
            _builder.append("return \"\"+");
          }
        }
        _builder.append(" ");
        String _name_18 = a_3.getName();
        _builder.append(_name_18, "   \t\t\t");
        _builder.append("(");
        {
          Payload _payload_1 = a_3.getPayload();
          boolean _tripleNotEquals_5 = (_payload_1 != null);
          if (_tripleNotEquals_5) {
            {
              EList<Param> _params_3 = a_3.getPayload().getParams();
              for(final Param b_1 : _params_3) {
                {
                  boolean _equals_5 = b_1.getType().getName().equals("int");
                  if (_equals_5) {
                    _builder.append("Int32.Parse");
                  }
                }
                {
                  boolean _equals_6 = b_1.getType().getName().equals("bool");
                  if (_equals_6) {
                    _builder.append("Boolean.Parse");
                  }
                }
                {
                  boolean _equals_7 = b_1.getType().getName().equals("real");
                  if (_equals_7) {
                    _builder.append("double.Parse");
                  }
                }
                _builder.append("(param[");
                int _plusPlus = counter_1++;
                _builder.append(_plusPlus, "   \t\t\t");
                _builder.append("])");
                _builder.newLineIfNotEmpty();
                {
                  int _length_1 = ((Object[])Conversions.unwrapArray(a_3.getPayload().getParams(), Object.class)).length;
                  boolean _lessThan_1 = (counter_1 < _length_1);
                  if (_lessThan_1) {
                    _builder.append(",");
                  }
                }
              }
            }
          }
        }
        _builder.append(");");
        _builder.newLineIfNotEmpty();
        _builder.append("   \t");
        _builder.append("\t");
        _builder.append("}");
        _builder.newLine();
      }
    }
    {
      EList<Action> _actions = e.getInstanceType().getType().getActions();
      for(final Action a_4 : _actions) {
        int counter_2 = 0;
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("if(name == \"");
        String _name_19 = a_4.getName();
        _builder.append(_name_19, "\t");
        _builder.append("\"){");
        _builder.newLineIfNotEmpty();
        _builder.append("   \t\t\t");
        {
          Payload _returnPayload_4 = a_4.getReturnPayload();
          boolean _tripleNotEquals_6 = (_returnPayload_4 != null);
          if (_tripleNotEquals_6) {
            _builder.append("return \"\"+");
          }
        }
        _builder.append(" ");
        String _name_20 = a_4.getName();
        _builder.append(_name_20, "   \t\t\t");
        _builder.append("(");
        {
          Payload _payload_2 = a_4.getPayload();
          boolean _tripleNotEquals_7 = (_payload_2 != null);
          if (_tripleNotEquals_7) {
            {
              EList<Param> _params_4 = a_4.getPayload().getParams();
              for(final Param b_2 : _params_4) {
                {
                  boolean _equals_8 = b_2.getType().getName().equals("int");
                  if (_equals_8) {
                    _builder.append("Int32.Parse");
                  }
                }
                {
                  boolean _equals_9 = b_2.getType().getName().equals("bool");
                  if (_equals_9) {
                    _builder.append("Boolean.Parse");
                  }
                }
                {
                  boolean _equals_10 = b_2.getType().getName().equals("real");
                  if (_equals_10) {
                    _builder.append("double.Parse");
                  }
                }
                _builder.append("(param[");
                int _plusPlus_1 = counter_2++;
                _builder.append(_plusPlus_1, "   \t\t\t");
                _builder.append("])");
                _builder.newLineIfNotEmpty();
                {
                  int _length_2 = ((Object[])Conversions.unwrapArray(a_4.getPayload().getParams(), Object.class)).length;
                  boolean _lessThan_2 = (counter_2 < _length_2);
                  if (_lessThan_2) {
                    _builder.append(",");
                  }
                }
              }
            }
          }
        }
        _builder.append(");");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("}");
        _builder.newLine();
      }
    }
    _builder.append("   \t");
    {
      if (((((Object[])Conversions.unwrapArray(e.getInstanceType().getType().getActions(), Object.class)).length != 0) && (((Object[])Conversions.unwrapArray(e.getInstanceType().getNewActions(), Object.class)).length != 0))) {
        _builder.append("\telse return \"\";");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t");
    _builder.append("return \"\";");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("// --- End message handling");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence readme(final ENV a) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("  \t\t");
    _builder.append("-----------------------------------------------------------------------");
    _builder.newLine();
    _builder.append("  \t\t");
    _builder.append("Generated with SimGen v1.0.0");
    _builder.newLine();
    _builder.append("  \t\t");
    _builder.append("Created by Michal Pasternak at Queen\'s University MASE lab");
    _builder.newLine();
    _builder.append("  \t\t");
    _builder.append("-----------------------------------------------------------------------");
    _builder.newLine();
    _builder.append("  \t\t");
    _builder.append("This generated simulation \"");
    String _name = a.getName();
    _builder.append(_name, "  \t\t");
    _builder.append("\" was created by: ");
    String _authorString = a.getAuthor().getAuthorString();
    _builder.append(_authorString, "  \t\t");
    _builder.newLineIfNotEmpty();
    _builder.append("  \t\t");
    _builder.append("The purpose of this simulation is to:\"");
    String _purposeString = a.getPurpose().getPurposeString();
    _builder.append(_purposeString, "  \t\t");
    _builder.append("\"");
    _builder.newLineIfNotEmpty();
    _builder.append("  \t\t");
    _builder.newLine();
    _builder.append("  \t\t");
    _builder.append("NOTICE!!!");
    _builder.newLine();
    {
      EList<Channel> _channels = a.getChannels();
      for(final Channel b : _channels) {
        _builder.append("  \t\t");
        _builder.append("Channel ");
        String _name_1 = b.getName();
        _builder.append(_name_1, "  \t\t");
        _builder.append(" requires port ");
        int _portnumber = b.getPort().getPortnumber();
        _builder.append(_portnumber, "  \t\t");
        _builder.append(" to be available for connection on the host machine.");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("  \t\t");
    _builder.append("-----------------------------------------------------------------------");
    _builder.newLine();
    _builder.append("  \t\t");
    _builder.newLine();
    {
      EList<Channel> _channels_1 = a.getChannels();
      for(final Channel b_1 : _channels_1) {
        _builder.append("  \t\t");
        _builder.append("Connecting on Port ");
        int _portnumber_1 = b_1.getPort().getPortnumber();
        _builder.append(_portnumber_1, "  \t\t");
        _builder.append(" will allow you to control: ");
        boolean s = false;
        {
          EList<Instance> _boundInstances = b_1.getBoundInstances();
          for(final Instance c : _boundInstances) {
            _builder.newLineIfNotEmpty();
            {
              if ((s == false)) {
                Object _xblockexpression = null;
                {
                  s = true;
                  _xblockexpression = null;
                }
                _builder.append(_xblockexpression);
                String _name_2 = c.getName();
                _builder.append(_name_2);
              } else {
                _builder.append(",");
                String _name_3 = c.getName();
                _builder.append(_name_3);
              }
            }
          }
        }
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("  \t\t");
    String names = "";
    {
      EList<Instance> _instances = a.getInstances();
      for(final Instance b_2 : _instances) {
        {
          if (((((Object[])Conversions.unwrapArray(b_2.getInstanceType().getNewActions(), Object.class)).length == 0) && (((Object[])Conversions.unwrapArray(b_2.getInstanceType().getType().getActions(), Object.class)).length == 0))) {
            _builder.newLineIfNotEmpty();
            Object _xblockexpression_1 = null;
            {
              String _name_4 = b_2.getName();
              String _plus = (names + _name_4);
              String _plus_1 = (_plus + " ");
              names = _plus_1;
              _xblockexpression_1 = null;
            }
            _builder.append(_xblockexpression_1);
          }
        }
      }
    }
    _builder.newLineIfNotEmpty();
    _builder.append("  \t\t");
    {
      boolean _notEquals = (!Objects.equal(names, ""));
      if (_notEquals) {
        _builder.append("WARNING: The following instantiated objects can not be controlled: ");
        _builder.append(names, "  \t\t");
      }
    }
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    {
      EList<Instance> _instances_1 = a.getInstances();
      for(final Instance b_3 : _instances_1) {
        {
          int _length = ((Object[])Conversions.unwrapArray(b_3.getInstanceType().getNewActions(), Object.class)).length;
          boolean _notEquals_1 = (_length != 0);
          if (_notEquals_1) {
            _builder.append("  \t\t");
            _builder.newLine();
            _builder.append("  \t\t");
            _builder.append("-----------------------------------------------------------------------");
            _builder.newLine();
            _builder.append("  \t\t");
            _builder.append("You can interact with ");
            String _name_4 = b_3.getName();
            _builder.append(_name_4, "  \t\t");
            _builder.append(" by using these actions:");
            _builder.newLineIfNotEmpty();
            _builder.append("  \t\t");
            _builder.newLine();
            {
              EList<Action> _newActions = b_3.getInstanceType().getNewActions();
              for(final Action c_1 : _newActions) {
                _builder.append("  \t\t");
                _builder.append("Action: ");
                String _name_5 = c_1.getName();
                _builder.append(_name_5, "  \t\t");
                _builder.newLineIfNotEmpty();
                _builder.append("  \t\t");
                _builder.append("Message Syntax: ");
                String _name_6 = b_3.getName();
                _builder.append(_name_6, "  \t\t");
                _builder.append(",");
                String _name_7 = c_1.getName();
                _builder.append(_name_7, "  \t\t");
                boolean s_1 = false;
                _builder.append("(");
                {
                  Payload _payload = c_1.getPayload();
                  boolean _tripleNotEquals = (_payload != null);
                  if (_tripleNotEquals) {
                    {
                      EList<Param> _params = c_1.getPayload().getParams();
                      for(final Param d : _params) {
                        {
                          if ((s_1 == false)) {
                            Object _xblockexpression_2 = null;
                            {
                              s_1 = true;
                              _xblockexpression_2 = null;
                            }
                            _builder.append(_xblockexpression_2, "  \t\t");
                            _builder.newLineIfNotEmpty();
                            _builder.append(" ");
                          } else {
                            _builder.append(",");
                          }
                        }
                        String _name_8 = d.getType().getName();
                        _builder.append(_name_8, "  \t\t");
                      }
                    }
                  }
                }
                _builder.append(")");
                _builder.newLineIfNotEmpty();
                _builder.append("  \t\t");
                _builder.append("Returns: ");
                {
                  Payload _returnPayload = c_1.getReturnPayload();
                  boolean _tripleNotEquals_1 = (_returnPayload != null);
                  if (_tripleNotEquals_1) {
                    _builder.append("String in form \"");
                    String _name_9 = b_3.getName();
                    _builder.append(_name_9, "  \t\t");
                    _builder.append(",");
                    Object _xblockexpression_3 = null;
                    {
                      s_1 = false;
                      _xblockexpression_3 = null;
                    }
                    _builder.append(_xblockexpression_3, "  \t\t");
                    {
                      EList<Param> _params_1 = c_1.getReturnPayload().getParams();
                      for(final Param d_1 : _params_1) {
                        {
                          if ((s_1 == false)) {
                            _builder.newLineIfNotEmpty();
                            Object _xblockexpression_4 = null;
                            {
                              s_1 = true;
                              _xblockexpression_4 = null;
                            }
                            _builder.append(_xblockexpression_4);
                          } else {
                            _builder.append(",");
                          }
                        }
                        String _name_10 = d_1.getType().getName();
                        _builder.append(_name_10, "  \t\t");
                      }
                    }
                    _builder.append(";\"");
                  } else {
                    _builder.append(" No Return");
                  }
                }
                _builder.newLineIfNotEmpty();
                _builder.append("  \t\t");
                _builder.append("Description: ");
                {
                  Purpose _description = c_1.getDescription();
                  boolean _tripleNotEquals_2 = (_description != null);
                  if (_tripleNotEquals_2) {
                    String _purposeString_1 = c_1.getDescription().getPurposeString();
                    _builder.append(_purposeString_1, "  \t\t");
                  } else {
                    _builder.append("no description provided");
                  }
                }
                _builder.newLineIfNotEmpty();
              }
            }
          }
        }
        {
          int _length_1 = ((Object[])Conversions.unwrapArray(b_3.getInstanceType().getType().getActions(), Object.class)).length;
          boolean _notEquals_2 = (_length_1 != 0);
          if (_notEquals_2) {
            _builder.append("  \t\t");
            _builder.append(" ");
            _builder.newLine();
            _builder.append("  \t\t");
            _builder.append("-----------------------------------------------------------------------");
            _builder.newLine();
            _builder.append("  \t\t");
            String _name_11 = b_3.getName();
            _builder.append(_name_11, "  \t\t");
            _builder.append(" inherits these actions from the metaModel:");
            _builder.newLineIfNotEmpty();
            _builder.append("  \t\t");
            _builder.newLine();
            {
              EList<Action> _actions = b_3.getInstanceType().getType().getActions();
              for(final Action c_2 : _actions) {
                _builder.append("  \t\t");
                _builder.append("Action: ");
                String _name_12 = c_2.getName();
                _builder.append(_name_12, "  \t\t");
                _builder.newLineIfNotEmpty();
                _builder.append("  \t\t");
                _builder.append("Message Syntax: ");
                String _name_13 = b_3.getName();
                _builder.append(_name_13, "  \t\t");
                _builder.append(",");
                String _name_14 = c_2.getName();
                _builder.append(_name_14, "  \t\t");
                boolean s_2 = false;
                _builder.append("(");
                {
                  Payload _payload_1 = c_2.getPayload();
                  boolean _tripleNotEquals_3 = (_payload_1 != null);
                  if (_tripleNotEquals_3) {
                    {
                      EList<Param> _params_2 = c_2.getPayload().getParams();
                      for(final Param d_2 : _params_2) {
                        {
                          if ((s_2 == false)) {
                            _builder.newLineIfNotEmpty();
                            Object _xblockexpression_5 = null;
                            {
                              s_2 = true;
                              _xblockexpression_5 = null;
                            }
                            _builder.append(_xblockexpression_5);
                          } else {
                            _builder.append(",");
                          }
                        }
                        String _name_15 = d_2.getType().getName();
                        _builder.append(_name_15, "  \t\t");
                      }
                    }
                  }
                }
                _builder.append(")");
                _builder.newLineIfNotEmpty();
                _builder.append("  \t\t");
                _builder.append("Returns: ");
                {
                  Payload _returnPayload_1 = c_2.getReturnPayload();
                  boolean _tripleNotEquals_4 = (_returnPayload_1 != null);
                  if (_tripleNotEquals_4) {
                    _builder.append("String in form \"");
                    String _name_16 = b_3.getName();
                    _builder.append(_name_16, "  \t\t");
                    _builder.append(",");
                    Object _xblockexpression_6 = null;
                    {
                      s_2 = false;
                      _xblockexpression_6 = null;
                    }
                    _builder.append(_xblockexpression_6, "  \t\t");
                    {
                      EList<Param> _params_3 = c_2.getReturnPayload().getParams();
                      for(final Param d_3 : _params_3) {
                        _builder.newLineIfNotEmpty();
                        {
                          if ((s_2 == false)) {
                            Object _xblockexpression_7 = null;
                            {
                              s_2 = true;
                              _xblockexpression_7 = null;
                            }
                            _builder.append(_xblockexpression_7);
                          } else {
                            _builder.append(",");
                          }
                        }
                        String _name_17 = d_3.getType().getName();
                        _builder.append(_name_17);
                      }
                    }
                    _builder.append(";\"");
                  } else {
                    _builder.append(" No Return");
                  }
                }
                _builder.newLineIfNotEmpty();
                _builder.append("  \t\t");
                _builder.append("Description: ");
                {
                  Purpose _description_1 = c_2.getDescription();
                  boolean _tripleNotEquals_5 = (_description_1 != null);
                  if (_tripleNotEquals_5) {
                    String _purposeString_2 = c_2.getDescription().getPurposeString();
                    _builder.append(_purposeString_2, "  \t\t");
                  } else {
                    _builder.append("no description provided");
                  }
                }
                _builder.newLineIfNotEmpty();
                _builder.append("  \t\t");
                _builder.newLine();
              }
            }
          }
        }
      }
    }
    _builder.append("  \t\t");
    _builder.newLine();
    return _builder;
  }
}
