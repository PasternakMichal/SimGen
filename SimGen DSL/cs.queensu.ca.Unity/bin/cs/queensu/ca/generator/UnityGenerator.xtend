/*
 * generated by Xtext 2.11.0
 */


package cs.queensu.ca.generator

import com.google.inject.Injector
import cs.queensu.ca.UnityStandaloneSetup
import cs.queensu.ca.unity.Attribute
import cs.queensu.ca.unity.BoolLiteral
import cs.queensu.ca.unity.Channel
import cs.queensu.ca.unity.ENV
import cs.queensu.ca.unity.Expression
import cs.queensu.ca.unity.Instance
import cs.queensu.ca.unity.IntLiteral
import cs.queensu.ca.unity.Literal
import cs.queensu.ca.unity.MetaObject
import cs.queensu.ca.unity.RealLiteral
import cs.queensu.ca.unity.Ref
import cs.queensu.ca.unity.StLiteral
import cs.queensu.ca.unity.UnaryExpression
import cs.queensu.ca.unity.UnityObject
import cs.queensu.ca.unity.VarType
import cs.queensu.ca.unity.impl.AdditionImpl
import cs.queensu.ca.unity.impl.AssignImpl
import cs.queensu.ca.unity.impl.DivideImpl
import cs.queensu.ca.unity.impl.IdentifierImpl
import cs.queensu.ca.unity.impl.MinusImpl
import cs.queensu.ca.unity.impl.ModuloImpl
import cs.queensu.ca.unity.impl.MultiplicationImpl
import cs.queensu.ca.unity.impl.PropertyImpl
import cs.queensu.ca.unity.impl.SingleRefImpl
import java.io.FileReader
import java.io.IOException
import java.util.ArrayList
import java.util.HashMap
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import org.eclipse.xtext.resource.XtextResourceSet

import static extension com.google.common.io.CharStreams.*

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class UnityGenerator extends AbstractGenerator {
	var ArrayList<String> lines = new ArrayList<String>();
	var HashMap<String, String> keyHash = new HashMap<String, String>();

	//UMLRTLibraryGenerator umlrtUtil;
	
	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		//----- Unity File Generation -----
		println("Checking config file...");
		
       System.out.println("Working Directory = " +
              System.getProperty("user.dir"));
		readFile("prototypeConfig.txt");
		// -- read file to figure out which .xtend files should be generated
		// generate unity code
		generateUnityCode(resource,fsa,context);
		
		// generate model xmi
		generateXMIFile(resource,fsa); 
		// generate UMLRT model library
		//var UMLRTLibraryGenerator umlrtUtil=new UMLRTLibraryGenerator(resource,fsa,context) ;
		//umlrtUtil.generateModelLibrary();
	}
	
	def UMLRTLibraryGenerator(Resource resource, IFileSystemAccess2 access2, IGeneratorContext context) {
		throw new UnsupportedOperationException("TODO: auto-generated method stub")
	}
	   		// --- utilities ---
	// generate xmi file 
	def generateXMIFile(Resource resource, IFileSystemAccess2 fsa) {
   		// ----- XMI generation -----
		var Injector injector = new UnityStandaloneSetup().createInjectorAndDoEMFRegistration();
		var XtextResourceSet resourceSet =injector.getInstance(XtextResourceSet);
		var String xtextFilename=resource.URI.lastSegment;
		var String EcoreFileName=xtextFilename.replace(xtextFilename.split("\\.").get(1),"xmi")
		var Resource xmiResource=resourceSet.createResource(fsa.getURI(EcoreFileName));

		xmiResource.getContents().add(resource.getContents().get(0));

   			try {
      		 	xmiResource.save(null);
    		} 
    		catch (IOException e) {
       	 		e.printStackTrace();
   			}		
	}
		
	// main unity code generation function
	def generateUnityCode(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		for (m: resource.allContents.toIterable.filter(MetaObject)){
			// ----- Generate all the MetaObject classes for reference in unity
			
			fsa.generateFile(("Simulator/"+resource.URI.lastSegment+"/"+m.name+"MetaObject.cs"),allClass(m));
		}
		
		for (a: resource.allContents.toIterable.filter(ENV)){
			//starter populates the scene with all relevant objects for the simulation
			
			fsa.generateFile("Simulator/"+resource.URI.lastSegment+"/"+"starter.cs",starter(a));
			// ------- Create Unity scripts for each MetaObject -------
			
   			for (b: a.instances){
   				if (b.instanceType.type.kind == 'generic'){
   					fsa.generateFile(("Simulator/"+resource.URI.lastSegment+"/"+b.name+"Script.cs"),generic(b));
   				}
   				else{
   				fsa.generateFile(("Simulator/"+resource.URI.lastSegment+"/"+b.name+"Script.cs"),allObject(b));
   				}
   			}		
   			for (c: a.channels){
   				fsa.generateFile(("Simulator/"+resource.URI.lastSegment+"/"+"ChannelController"+c.name+".cs"),channelcontroller(c));
   			}
   			fsa.generateFile(("Simulator/"+resource.URI.lastSegment+"/"+"README.txt"),readme(a));
   		}		
	} 		

	def readFile(String fileName){
		if(keyHash.empty==true){
			val file = new FileReader(fileName).readLines
			for(a:file){
				if(a.contains(":")==false && a.contains("=")==true){
					keyHash.put(a.substring(0,a.indexOf("=")),a.substring(a.indexOf("=")+1));
				}
				else if(a.contains(":")==true){
					lines.add(a);
				}
			}
		}
	}
	

	
	def int intExtractor(Expression e){
		switch (e){
	   		Literal:{
	   				var Literal litvalue=e as Literal;
	   				if (litvalue instanceof IntLiteral){
	   				print((litvalue as IntLiteral).getInt()) ;
	   				var int i=(litvalue as IntLiteral).getInt().intValue;
	   				return i;
	   				}			 		
	   			}
	   		UnaryExpression:{ 
	   			var Expression myExp = e.exp;
	   			var answer = intExtractor(myExp);
	   			return -answer
	   			}
	   		
	   		}
	   		
	   		return 0;
	}
	def double realExtractor(Expression e){
		switch (e){
	   		Literal:{
	   				var Literal litvalue=e as Literal;
	   				if (litvalue instanceof RealLiteral){
	   				print((litvalue as RealLiteral).getReal()) ;
	   				var double i=(litvalue as RealLiteral).getReal().doubleValue;
	   				return i;
	   				}			 		
	   			}
	   		UnaryExpression:{ 
	   			var Expression myExp = e.exp;
	   			var answer = realExtractor(myExp);
	   			return -answer;
	   			}
	   		
	   		}
	   		
	   		return 0.0;
	}
	
	def String stringify(Expression e,String s,MetaObject m){
		 switch(e){
		 	PropertyImpl:{return translateToUnity(e.name,m)}
		 	IdentifierImpl:{s+translateToUnity(refExtract(e.refrence),m)}
		 	Literal:{return stringExtractor(e)}
		 	MultiplicationImpl:{return (stringify(e.left,s,m)+" * "+stringify(e.right,s,m))}
		 	AdditionImpl: {return stringify(e.left,s,m)+" + "+stringify(e.right,s,m)}
		 	AssignImpl:{return (stringify(e.left,s,m)+" = "+stringify(e.right,s,m))}
		 	ModuloImpl:{return (stringify(e.left,s,m) +" % "+stringify(e.right,s,m))}
		 	DivideImpl:{return (stringify(e.left,s,m) +" / "+stringify(e.right,s,m))}
		 	MinusImpl:{return (stringify(e.left,s,m) +" - "+stringify(e.right,s,m))}
		 	Expression:{return "error help me"}
		 }
	}
		
	def String translateToUnity(String s,MetaObject m){
			// --- common to all objects ---
			
		if (s!==null){ // config file overrides defaults.
			 if (keyHash.get(m.name+"."+s)!==null){
			 	return keyHash.get(m.name+"."+s);
			 }
		}
				
		if (s == "posX") return "posx"
		else if (s == "posY") return "posy"
		else if (s == "posZ") return "posz"
				
		else if (s == "sizeX") return "sizex"
		else if (s == "sizeY") return "sizey"
		else if (s == "sizeZ") return "sizez"
					
		else return s
	}
		
		
		
	def String refExtract(Ref a){
		switch(a){
			SingleRefImpl:{
				a.singleRef.name
			}
		}
	}
		
	def stringExtractor(Expression e){   
	   	switch (e){
			Literal: {
				var Literal litvalue=e as Literal;
				if (litvalue instanceof StLiteral){
					// print((litvalue as StLiteral).getString()) ;
					 var String i=(litvalue as StLiteral).getString();
					 return i;
				} 
				if (litvalue instanceof IntLiteral){
					return (intExtractor(litvalue)).toString
				}
				if (litvalue instanceof BoolLiteral){
					return (boolExtractor(litvalue)).toString
				}
				if (litvalue instanceof RealLiteral){
					return (realExtractor(litvalue)).toString
				}
			}
		}
	}
	   		
	   		
	def boolExtractor(Expression e){
		switch (e){
	   		Literal: {
	   			var Literal litvalue=e as Literal;
	   			if (litvalue instanceof BoolLiteral){
	   	//			print((litvalue as BoolLiteral).isBool());
	   				var boolean b = (litvalue as BoolLiteral).isBool().booleanValue;
	   				return b;
	   			}
	   		}
	   	}
	   			
	}
	   	
	def getIntValue(UnityObject a,String b){
		for (q: a.configurations){
	   		for (w: q.configs){
	   			if (w.propertyName.name == b){
	 				return (intExtractor(w.propertyValue));
	   			}
	   		}
	   	}
	   	return 0;
	}
	   	
	 
	def getRealValue(UnityObject a,String b){
		for (q: a.configurations){
			for (w: q.configs){
				if (w.propertyName.name == b){
						return (realExtractor(w.propertyValue));
				}
			}
		}
		return 0.0;
	}	   		
	def getStringValue(UnityObject a,String b){
		for (q: a.configurations){
			for (w: q.configs){
				if (w.propertyName.name == b){
					return (stringExtractor(w.propertyValue));
	   				}
	   			}
	   		}
		return "";
	}
	   		
	def getBoolValue(UnityObject a,String b){
		for (q: a.configurations){
			for (w: q.configs){
				if (w.propertyName.name == b){
					return ((boolExtractor(w.propertyValue)));
				}
			}
		}
		return false;
	}
	def String getVarType(Attribute p) {
   		if (p.propertyType.name == 'bool'){
   			return 'bool'
   		}
   		else if (p.propertyType.name ==  'int'){
   			return 'int'
   		}
   		else if (p.propertyType.name == 'string'){
   			return 'string'
   		}
   		else {
   			return 'double'
   		}
   	}
   	def String getVarType(VarType p) {
   		if (p === null){
   			return ''
   		}
   		else if (p.name ==  'bool'){
   			return 'bool'
   		}
   		else if (p.name ==  'int'){
   			return 'int'
   		}
   		else if (p.name == 'string'){
   			return 'string'
   		}
   		else {
   			return 'double'
   		}
   	}
	   		
	def sizeAndScale(UnityObject e,String a)'''
	t.localScale = new Vector3 (Â«e.getRealValue("sizeX")Â»f,Â«e.getRealValue("sizeY")Â»f,Â«e.getRealValue("sizeZ")Â»f);
	t.localPosition = new Vector3(Â«e.getRealValue("posX")Â»f,Â«e.getRealValue("posY")Â»f,Â«e.getRealValue("posZ")Â»f);
	'''
   		// --- script definitions ---
   	def generic(Instance e) '''
   		using System.Collections;
   		using System.Collections.Generic;
   		using UnityEngine;
   		public class Â«e.nameÂ»Script : Â«e.instanceType.type.nameÂ»MetaObject {
   			public sateliteCameraScript cam;
   			void Start () {
   				Rigidbody rb = gameObject.GetComponent<Rigidbody> ();
   				rb.mass = Â«getIntValue(e.instanceType,"mass")Â»;
   				Â«sizeAndScale(e.instanceType,e.instanceType.type.kind)Â»
   				
   				// load all meshes in model and find the specified mesh
   				MeshFilter myMeshFilter = gameObject.GetComponent<MeshFilter> ();
   				GameObject loadedModel = Resources.Load("Â«getStringValue(e.instanceType,"model")Â»") as GameObject; 
   				// first check object, if not found then check all children.
   				if (loadedModel.GetComponent<MeshFilter> () != null && loadedModel.GetComponent<MeshFilter> ().sharedMesh.name ==("
Â«getStringValue(e.instanceType,"mesh")Â»")) {
   					myMeshFilter.mesh = loadedModel.GetComponent<MeshFilter> ().sharedMesh;
   				} else {
   					MeshFilter[] loadedMeshFilters = loadedModel.GetComponentsInChildren<MeshFilter> ();
   					foreach (MeshFilter mf in loadedMeshFilters) { 
   						if (mf.sharedMesh.name == "Â«getStringValue(e.instanceType,"mesh")Â»") {
   							myMeshFilter.mesh = mf.sharedMesh; 
   							break;
   						}
   					}
   				}
   				// Set the renderer to specified image 
   				Renderer myRenderer = gameObject.GetComponent<Renderer>();
   				myRenderer.material = new Material(Shader.Find("Diffuse"));
   				myRenderer.material.mainTexture = Resources.Load("Â«getStringValue(e.instanceType,"texture")Â»") as Texture;
   				// Set Collider
   				MeshCollider myMeshCollider = gameObject.GetComponent<MeshCollider> ();
   				myMeshCollider.sharedMesh = myMeshFilter.mesh;
   				
   			}
   			// -- add all new actions
   			   		   	Â«FOR a:e.instanceType.newActionsÂ»
   			   		   	Â«IF a.name.equals("place")Â»
   			   		   	Â«ELSEÂ»
   			   		Â«var counter=0Â»
   			   		Â«var counter2=0Â»
   			   		Â«var returnVal = ""Â»
   			   		Â«var VarType returnType = nullÂ»
   			   		   	Â«IF a !== nullÂ»
   			   		   	public Â«IF a.returnPayload === nullÂ»voidÂ«ELSEÂ»Â«FOR b:a.returnPayload.paramsÂ»Â«IF b.type.name.equals("int")&&
   			   		   	counter2==0Â»intÂ«{counter2++;null}Â»Â«{returnVal = b.name;null}Â»Â«{returnType = b.type;null}Â»Â«ELSEIF 
   			   		   	b.type.name.equals("string")&&counter2==0Â»stringÂ«{counter2++;null}Â»Â«{returnVal = b.name;null}Â»
Â«{returnType = b.type;null}Â»Â«ELSEIF b.type.name.equals("real")&&counter2==0Â»doubleÂ«{counter2++;null}Â»
Â«{returnVal = b.name;null}Â»Â«{returnType = b.type;null}Â»Â«ELSEIF b.type.name.equals("bool")&&counter2==0Â»booleanÂ«{counter2++;null}Â»
Â«{returnVal = b.name;null}Â»Â«{returnType = b.type;null}Â»Â«ENDIFÂ»Â«ENDFORÂ»Â«ENDIFÂ» Â«a.nameÂ»(Â«IF a.payload !== nullÂ»
Â«FOR b:a.payload.paramsÂ»Â«b.type.nameÂ» Â«b.nameÂ»Â«{counter++;null}Â»Â«IF counter<a.payload.params.lengthÂ»,Â«ENDIFÂ»Â«ENDFORÂ»Â«ENDIFÂ»){
   			   		   		Â«IF a.returnPayload !== nullÂ»Â«getVarType(returnType)Â» Â«returnValÂ»;Â«ENDIFÂ»
   			   		   		Â«FOR v:a.expressionsÂ»
   			   		   		Â«stringify(v,'',e.instanceType.type)Â»;
   			   		   		Â«ENDFORÂ»
   			   		   		Â«IF a.returnPayload !== nullÂ»return Â«returnValÂ»;Â«ENDIFÂ»
   			   		   	}
   			   		   		Â«ENDIFÂ»
   			   		   		Â«ENDIFÂ»
   			   		   		Â«ENDFORÂ»
   			   		   
   			   		   	// -- End adding all new actions
   			   		   	// -- overide existing actions
   			   		   	Â«FOR a:e.instanceType.overrideActionsÂ»
   			   		   	   	public override string Â«a.actionName.nameÂ»(){
   			   		   	   		base.Â«a.actionName.nameÂ»();
   			   		   	   		Â«FOR v:a.expressionsÂ»
   			   		   	   		Â«stringify(v,'',e.instanceType.type)Â»;
   			   		   	   		Â«ENDFORÂ»
   			   		   	   		   	}
   			   		   	 Â«ENDFORÂ»
   			   		   	 // -- End overrideActions
   			   		   	 
   			   		   	 // -- Handle incoming message
   			   			public string translate(string message){
   			   				// -- Update basic object properties
   			   				statusUpdate();
   			   				//--Get parameters as strings.
   			   				string name = message.Substring (0, message.IndexOf ('('));
   			   				message = cut(message,'(');
   			   				string [] param = extractParam(message);
   			   				
   			   				
   			   				
   			   		   	Â«FOR a:e.instanceType.newActionsÂ»
   			   		   	Â«var counter=0Â»
   			   		   		if(name == "Â«a.nameÂ»"){
   			   		   			Â«IF a.name.equals("place")Â»
   			   		   			   	GameObject temp = (GameObject)Instantiate(Resources.Load("Â«FOR z:a.expressionsÂ»
   	Â«stringExtractor(z)Â»Â«ENDFORÂ»"),transform.position,transform.rotation);
   			   		   			   	temp.transform.Rotate(90f,0,0);
   			   		   			   	lastx = transform.position.x;
   			   		   			   	lastz = transform.position.z;
   			   		   			Â«ELSEÂ»
   			   		   		Â«IF a.returnPayload !== nullÂ»return ""+Â«ENDIFÂ» Â«a.nameÂ»(Â«IF a.payload !== nullÂ»
Â«FOR b:a.payload.paramsÂ»Â«IF b.type.name.equals("int")Â»Int32.ParseÂ«ENDIFÂ»Â«IF b.type.name.equals("bool")Â»Boolean.ParseÂ«ENDIFÂ»
Â«IF b.type.name.equals("real")Â»double.ParseÂ«ENDIFÂ»(param[Â«counter++Â»])Â«IF counter<a.payload.params.lengthÂ»,Â«ENDIFÂ»Â«ENDFORÂ»Â«ENDIFÂ»);
   			   		   		Â«ENDIFÂ»
   			   		   		 }
   			   		   	Â«ENDFORÂ»
   			   		   	Â«FOR a:e.instanceType.type.actionsÂ»
   			   		   	Â«var counter=0Â»
   			   		   		if(name == "Â«a.nameÂ»"){
   			   		   		Â«IF a.returnPayload !== nullÂ»return ""+Â«ENDIFÂ» Â«a.nameÂ»(Â«IF a.payload !== nullÂ»
Â«FOR b:a.payload.paramsÂ»Â«IF b.type.name.equals("int")Â»Int32.ParseÂ«ENDIFÂ»Â«IF b.type.name.equals("bool")Â»Boolean.ParseÂ«ENDIFÂ»
Â«IF b.type.name.equals("real")Â»double.ParseÂ«ENDIFÂ»(param[Â«counter++Â»])Â«IF counter<a.payload.params.lengthÂ»,Â«ENDIFÂ»Â«ENDFORÂ»Â«ENDIFÂ»);
   			   		   		}
   						Â«ENDFORÂ»
   			   		   	Â«IF e.instanceType.type.actions.length != 0 && e.instanceType.newActions.length != 0Â»		
   			   		   		else return "";
   			   		   	Â«ENDIFÂ»
   			   		   	return "";
   			   		   	} 
   			   		   	// -- End message handling
   			
   			void Update () {
   				// on going monitoring or changing things based on object
   			}
   			void focus(){
   				cam.observedObject = gameObject;
   			}
   			// -- utils
   			   		     public string cut(string message,char cutter){
   			   		   	 	return message.Substring(message.IndexOf(cutter)+1);
   			   		   	}
   			   		   	public string[] extractParam(string message){
   			   		   		message = message.Substring(message.IndexOf("(")+1,(message.IndexOf(")")));
   			   		   	    return message.Split(',');
   			   		   	}
   		}
   		'''
   		// --- starter needs all game object prefabs to be declared and attached
   	def starter(ENV e)'''
   		using System.Collections;
   		using System.Collections.Generic;
   		using UnityEngine;
   		   		
   		public class starter : MonoBehaviour {
   		// ---- These must be assigned as prefabs in Unity and as "metaobjects" in the DSL
   			public sateliteCameraScript Camera;

   			
   			GameObject CameraObject;
   		Â«FOR k:e.instancesÂ»
   			GameObject Â«k.nameÂ»Object;
   		Â«ENDFORÂ»
   		//-----
   			void Start () {
   			Application.runInBackground = true;
   		//-- adding the necessary instances
   			CameraObject = (GameObject)Instantiate (Resources.Load("CameraController"),transform);
   		   	
   		   	Â«FOR k:e.instancesÂ»
   		   		Â«k.nameÂ»Object = (GameObject)Instantiate (Resources.Load("Â«k.instanceType.type.nameÂ»"),transform);
   		   		Â«k.nameÂ»Object.AddComponent<Â«k.nameÂ»Script>();
   		   	Â«ENDFORÂ»
   		//adding the necessary channel information scripts	
   			Camera = CameraObject.GetComponent<sateliteCameraScript>();
   		   	Camera.observedObject = Â«e.focus.focusObject.nameÂ»Object;
   		   	Camera.off = new Vector3(Â«e.focus.dxÂ»f,Â«e.focus.dyÂ»f,Â«e.focus.dzÂ»f);
   		   	Â«FOR k:e.channelsÂ»
   		   	gameObject.AddComponent<ChannelControllerÂ«k.nameÂ»>();
   		   	Â«ENDFORÂ»
   			}
   				void Update(){//Â«var i = 0Â»
   				Â«FOR k:e.instancesÂ»
   				
   					if (Input.GetKeyDown(KeyCode.AlphaÂ«i=i+1Â»)){
   						Camera.observedObject = Â«k.nameÂ»Object;
   					}
   					Â«ENDFORÂ»
   					if (Input.GetKeyDown(KeyCode.Z)){
   						Camera.follow = true;
   					}
   					if (Input.GetKeyDown(KeyCode.X)){ 
   						Camera.follow = false;
   					}
   					if (Input.GetKeyDown(KeyCode.LeftArrow)){
   								Camera.transform.Rotate (0, -10, 0);
   							}
   							if (Input.GetKeyDown(KeyCode.RightArrow)){
   								Camera.transform.Rotate (0, 10, 0);
   							}
   				}
   		}
   		'''
   		
   		def channelcontroller(Channel c)'''
   		using System.Collections;
   		using System.Collections.Generic;
   		using UnityEngine;
   		
   		public class ChannelControllerÂ«c.nameÂ» : MonoBehaviour {
   			public Network externalComm;
   			public string myName = "Â«c.nameÂ»";
   		
   			void Start () {
   				externalComm = new Network(Â«c.port.portnumberÂ»,myName,20); // port, net ID, Container size
   				externalComm.StartNetwork();
   			}
   		
   			void Update () {
   				if (externalComm.isContainerEmpty () == false) {
   					route(externalComm.getMessage());
   				}
   			}
   			
   		// take out the important information from the message
   			public void route(string S){
   				if (S != null && S.Equals("")== false && S.Length>0) {
   					string name = S.Substring (0, S.IndexOf (','));
   					S = cut (S);
   		// send the message on to the designated recipient inout
   		
   			Â«FOR q: c.boundInstancesÂ»
   				if (name == "Â«q.nameÂ»") {
   					Â«q.nameÂ»Script Â«q.nameÂ» = GetComponentInChildren<Â«q.nameÂ»Script> ();
   				
   					// send the action name, return the reply that is generated
   					string reply = Â«q.nameÂ».translate (S);
   					// if there is a reply send one
   					if (reply.Equals("") == false && reply != null&& S.Length>0)
   						externalComm.SendMessage("Â«q.nameÂ»,"+reply+";");
   					}
   		Â«ENDFORÂ»
   				}
   			}
   			public string cut(string message){
   				return message.Substring(message.IndexOf(',')+1);
   			}
   		}
   		'''

   		def getValue(String s){
   		return s.substring(s.indexOf(":")+1)
   		}
   		
   		def extractType(String s){
   			return s.substring(s.indexOf("<")+1,s.indexOf(">"));
   		}
   		
   		def extractName(String s){
   			return s.substring(0,s.indexOf("="));
   		}
   		
   		def readLibInit(String s)'''
   		Â«FOR a:linesÂ»
   		Â«IF a.contains(s+":")Â»
   		public Â«extractType(getValue(a))Â» Â«extractName(getValue(a))Â»;
   		Â«ENDIFÂ»
   		Â«ENDFORÂ»
   		'''
   		def allClass (MetaObject m)'''
   		using UnityEngine;
   		using System.Collections;
   		
   		public class Â«m.nameÂ»MetaObject : MonoBehaviour {
   			
   			public Transform t;
   			// --- Get neccessary access components
   			Â«readLibInit(m.name)Â»
   			// --- End Get neccessary access components
   			
   			public double posx;
   			public double posy;
   			public double posz;
   			
   			public double sizex;
   			public double sizey;
   			public double sizez;
   			
   			void update(){
   				posx = t.localPosition.x;
   				posy = t.localPosition.y;
   				posz = t.localPosition.z;
   				
   				sizex = t.localScale.x;
   				sizey = t.localScale.y;
   				sizez = t.localScale.z;
   			}
   			
   			public void requiredStart(){
   				t = GetComponent<Transform>();
   				// --- Load components
   				Â«FOR a:linesÂ»
   				Â«IF a.contains(m.name+":")Â»
   				Â«a.substring(a.indexOf(":")+1)Â»
   				Â«ENDIFÂ»
   				Â«ENDFORÂ»
   				// --- End Load components
   			}
   		
   			   // -- DSL generated "actions"

   		Â«var isStart = falseÂ»
   		Â«FOR a:m.actionsÂ»
   		Â«var counter=0Â»
   		Â«var commas=falseÂ»
   		Â«IF a !== nullÂ»
   		
   			 public Â«IF a.returnPayload === nullÂ»voidÂ«ELSEÂ»stringÂ«ENDIFÂ» Â«a.nameÂ»(Â«IF
   			   		 a.payload !== nullÂ»Â«FOR b:a.payload.paramsÂ»Â«getVarType(b.type)Â» Â«b.nameÂ»Â«{counter++;null}Â»Â«IF
   			   		  counter<a.payload.params.lengthÂ»,Â«ENDIFÂ»Â«ENDFORÂ»Â«ENDIFÂ»){
   		
   		Â«IF a.returnPayload!== nullÂ»Â«FOR u:a.returnPayload.paramsÂ»
   		Â«IF u.type!== nullÂ»Â«getVarType(u.type)Â»Â«ENDIFÂ» Â«u.nameÂ»;
   		Â«ENDFORÂ»Â«ENDIFÂ»
   			
   			Â«IF a.name == "Start"Â»requiredStart();Â«{isStart =true;null}Â»Â«ENDIFÂ»
   			Â«FOR v:a.expressionsÂ»
   			Â«stringify(v,'',m)Â»;
   			Â«ENDFORÂ»
   			
   			Â«IF a.returnPayload !== nullÂ»return Â«FOR u:a.returnPayload.paramsÂ»Â«IF
   			commas==trueÂ»+","+Â«ELSEÂ»Â«{commas=true;null}Â»Â«ENDIFÂ»Â«u.nameÂ»Â«ENDFORÂ»+"";Â«ENDIFÂ»
   			}
   			Â«ENDIFÂ»
   			Â«ENDFORÂ»
   		
   			Â«IF isStart== falseÂ» // if start is not defined in metaobject we define it here.
   			void Start(){
   				requiredStart();
   			}
   			   			Â«ENDIFÂ»
   			// -- End DSL generated functions

   			// --- Utility functions

   			public string cut(string message,char cutter){
   				return message.Substring(message.IndexOf(cutter)+1);
   			}
   			
   			public string[] extractParam(string message){
   				message = message.Substring(message.IndexOf("(")+1,(message.IndexOf(")")));
   				return message.Split(',');
   			}
   		}
   		'''
   		
def allObject (Instance e)'''
using System.Collections;
using System.Collections.Generic;
using System;
using UnityEngine;

public class Â«e.nameÂ»Script : Â«e.instanceType.type.nameÂ»MetaObject {
	public string channelID;

	// --- auto declare all "properties"
   	Â«FOR a:e.instanceType.propertiesÂ»
	Â«IF a.propertyType.name == "int"Â»int Â«a.nameÂ»;
   	Â«ENDIFÂ»
   	Â«IF a.propertyType.name == "real"Â»double Â«a.nameÂ»;
   	Â«ENDIFÂ»
   	Â«IF a.propertyType.name == "string"Â»string Â«a.nameÂ»;
   	Â«ENDIFÂ»
   	Â«IF a.propertyType.name == "bool"Â»bool Â«a.nameÂ»;
   	Â«ENDIFÂ»
   	Â«ENDFORÂ»
	// --- End auto declare properties

	// --- Initialize object size/position
	void Start(){
		requiredStart();
		Â«sizeAndScale(e.instanceType,e.instanceType.type.name)Â»
	}
	// --- End start function
	
	// --- Add all new actions

	// -- DSL generated "actions"
	Â«var isStart = falseÂ»
   	Â«FOR a:e.instanceType.newActionsÂ»
Â«var counter=0Â»
Â«var commas=falseÂ»
   	Â«IF a !== nullÂ»
   	public Â«IF a.returnPayload === nullÂ»voidÂ«ELSEÂ»stringÂ«ENDIFÂ» Â«a.nameÂ»(Â«IF
   			 a.payload !== nullÂ»Â«FOR b:a.payload.paramsÂ»Â«getVarType(b.type)Â» Â«b.nameÂ»Â«{counter++;null}Â»Â«IF
   			  counter<a.payload.params.lengthÂ»,Â«ENDIFÂ»Â«ENDFORÂ»Â«ENDIFÂ»){
   			 Â«IF a.returnPayload!== nullÂ»Â«FOR u:a.returnPayload.paramsÂ»
   		Â«IF u.type!== nullÂ»Â«getVarType(u.type)Â»Â«ENDIFÂ» Â«u.nameÂ»;
   		Â«ENDFORÂ»Â«ENDIFÂ»
   			Â«IF a.name == "Start"Â»requiredStart();Â«{isStart =true;null}Â»Â«ENDIFÂ»
   			Â«FOR v:a.expressionsÂ»
   			Â«stringify(v,'',e.instanceType.type)Â»;
   			Â«ENDFORÂ»
   			Â«IF a.returnPayload !== nullÂ»return Â«FOR u:a.returnPayload.paramsÂ»Â«IF
   			commas==trueÂ»+","+Â«ELSEÂ»Â«{commas=true;null}Â»Â«ENDIFÂ»Â«u.nameÂ»Â«ENDFORÂ»+"";Â«ENDIFÂ»
   		}
   			Â«ENDIFÂ»
   		Â«ENDFORÂ»
	// --- End adding all new actions
	// --- Overide existing actions
	Â«FOR a:e.instanceType.overrideActionsÂ»
		public override string Â«a.actionName.nameÂ»(){
		base.Â«a.actionName.nameÂ»();
   		Â«FOR v:a.expressionsÂ»
			Â«stringify(v,'',e.instanceType.type)Â»;
		Â«ENDFORÂ»
		}
   		 Â«ENDFORÂ»
	// --- End overrideActions

	// --- Begin message handling
	public string translate(string message){	   				
	//--Get parameters as strings.
		string name = message.Substring (0, message.IndexOf ('('));
		message = cut(message,'(');
		string [] param = extractParam(message);

   	Â«FOR a:e.instanceType.newActionsÂ»
   	Â«var counter=0Â»
   		if(name == "Â«a.nameÂ»"){
   			Â«IF a.returnPayload !== nullÂ»return ""+Â«ENDIFÂ» Â«a.nameÂ»(Â«IF a.payload !== nullÂ»Â«FOR b:a.payload.paramsÂ»Â«IF 
   			b.type.name.equals("int")Â»Int32.ParseÂ«ENDIFÂ»Â«IF b.type.name.equals("bool")Â»Boolean.ParseÂ«ENDIFÂ»Â«IF 
   			b.type.name.equals("real")Â»double.ParseÂ«ENDIFÂ»(param[Â«counter++Â»])
Â«IF counter<a.payload.params.lengthÂ»,Â«ENDIFÂ»Â«ENDFORÂ»Â«ENDIFÂ»);
   		}
   	Â«ENDFORÂ»
   	Â«FOR a:e.instanceType.type.actionsÂ»
	Â«var counter=0Â»
		if(name == "Â«a.nameÂ»"){
   			Â«IF a.returnPayload !== nullÂ»return ""+Â«ENDIFÂ» Â«a.nameÂ»(Â«IF a.payload !== nullÂ»Â«FOR b:a.payload.paramsÂ»Â«IF 
				b.type.name.equals("int")Â»Int32.ParseÂ«ENDIFÂ»Â«IF b.type.name.equals("bool")Â»Boolean.ParseÂ«ENDIFÂ»Â«IF 
				b.type.name.equals("real")Â»double.ParseÂ«ENDIFÂ»(param[Â«counter++Â»])
Â«IF counter<a.payload.params.lengthÂ»,Â«ENDIFÂ»Â«ENDFORÂ»Â«ENDIFÂ»);
		}
   	Â«ENDFORÂ»
   	Â«IF e.instanceType.type.actions.length != 0 && e.instanceType.newActions.length != 0Â»	else return "";
	Â«ENDIFÂ»
	return "";
	}
	// --- End message handling
}
'''

   		
   		def readme (ENV a)'''
   		-----------------------------------------------------------------------
   		Generated with SimGen v1.0.0
   		Created by Michal Pasternak at Queen's University MASE lab
   		-----------------------------------------------------------------------
   		This generated simulation "Â«a.nameÂ»" was created by: Â«a.author.authorStringÂ»
   		The purpose of this simulation is to:"Â«a.purpose.purposeStringÂ»"
   		
   		NOTICE!!!
   		Â«FOR b:a.channelsÂ»
   		Channel Â«b.nameÂ» requires port Â«b.port.portnumberÂ» to be available for connection on the host machine.
   		Â«ENDFORÂ»
   		-----------------------------------------------------------------------
   		
   		Â«FOR b:a.channelsÂ»
   		Connecting on Port Â«b.port.portnumberÂ» will allow you to control: Â«var s =falseÂ»Â«FOR c:b.boundInstancesÂ»
Â«IF s==falseÂ»Â«{s=true;null}Â»Â«c.nameÂ»Â«ELSEÂ»,Â«c.nameÂ»Â«ENDIFÂ»Â«ENDFORÂ»
   		Â«ENDFORÂ»
   		Â«var names = ""Â»Â«FOR b:a.instancesÂ»Â«IF b.instanceType.newActions.length==0&&b.instanceType.type.actions.length==0Â»
Â«{names=names+b.name+" ";null}Â»Â«ENDIFÂ»Â«ENDFORÂ»
   		Â«IF names!= ""Â»WARNING: The following instantiated objects can not be controlled: Â«namesÂ»Â«ENDIFÂ»
 
   		Â«FOR b:a.instancesÂ»
   		Â«IF b.instanceType.newActions.length!=0Â»
   		
   		-----------------------------------------------------------------------
   		You can interact with Â«b.nameÂ» by using these actions:
   		
   		Â«FOR c:b.instanceType.newActionsÂ»
   		Action: Â«c.nameÂ»
   		Message Syntax: Â«b.nameÂ»,Â«c.nameÂ»Â«var s =falseÂ»(Â«IF c.payload!== nullÂ»Â«FOR d:c.payload.paramsÂ»Â«IF s== falseÂ»Â«{s=true;null}Â»
 Â«ELSEÂ»,Â«ENDIFÂ»Â«d.type.nameÂ»Â«ENDFORÂ»Â«ENDIFÂ»)
   		Returns: Â«IF c.returnPayload!== nullÂ»String in form "Â«b.nameÂ»,Â«{s =false;null}Â»Â«FOR d:c.returnPayload.paramsÂ»Â«IF s== falseÂ»
Â«{s=true;null}Â»Â«ELSEÂ»,Â«ENDIFÂ»Â«d.type.nameÂ»Â«ENDFORÂ»;"Â«ELSEÂ» No ReturnÂ«ENDIFÂ»
   		Description: Â«IF c.description!==nullÂ»Â«c.description.purposeStringÂ»Â«ELSEÂ»no description providedÂ«ENDIFÂ»
   		Â«ENDFORÂ»Â«ENDIFÂ»
   		Â«IF b.instanceType.type.actions.length!=0Â»
   		 
   		-----------------------------------------------------------------------
   		Â«b.nameÂ» inherits these actions from the metaModel:
   		
   		Â«FOR c:b.instanceType.type.actionsÂ»  
   		Action: Â«c.nameÂ»
   		Message Syntax: Â«b.nameÂ»,Â«c.nameÂ»Â«var s =falseÂ»(Â«IF c.payload!== nullÂ»Â«FOR d:c.payload.paramsÂ»Â«IF s== falseÂ»
 Â«{s=true;null}Â»Â«ELSEÂ»,Â«ENDIFÂ»Â«d.type.nameÂ»Â«ENDFORÂ»Â«ENDIFÂ»)
   		Returns: Â«IF c.returnPayload!== nullÂ»String in form "Â«b.nameÂ»,Â«{s =false;null}Â»Â«FOR d:c.returnPayload.paramsÂ»
 Â«IF s== falseÂ»Â«{s=true;null}Â»Â«ELSEÂ»,Â«ENDIFÂ»Â«d.type.nameÂ»Â«ENDFORÂ»;"Â«ELSEÂ» No ReturnÂ«ENDIFÂ»
   		Description: Â«IF c.description!==nullÂ»Â«c.description.purposeStringÂ»Â«ELSEÂ»no description providedÂ«ENDIFÂ»
   		
   		Â«ENDFORÂ»
   		Â«ENDIFÂ»
   		Â«ENDFORÂ»
   		
   		'''
   		
   		}
   		
   		